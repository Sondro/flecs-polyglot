/* automatically generated by rust-bindgen 0.63.0 */

pub const EcsWorldQuitWorkers: u32 = 1;
pub const EcsWorldReadonly: u32 = 2;
pub const EcsWorldQuit: u32 = 4;
pub const EcsWorldFini: u32 = 8;
pub const EcsWorldMeasureFrameTime: u32 = 16;
pub const EcsWorldMeasureSystemTime: u32 = 32;
pub const EcsOsApiHighResolutionTimer: u32 = 1;
pub const EcsOsApiLogWithColors: u32 = 2;
pub const EcsOsApiLogWithTimeStamp: u32 = 4;
pub const EcsOsApiLogWithTimeDelta: u32 = 8;
pub const EcsEntityObserved: u32 = 2147483648;
pub const EcsEntityObservedId: u32 = 1073741824;
pub const EcsEntityObservedTarget: u32 = 536870912;
pub const EcsEntityObservedAcyclic: u32 = 268435456;
pub const EcsIdOnDeleteRemove: u32 = 1;
pub const EcsIdOnDeleteDelete: u32 = 2;
pub const EcsIdOnDeletePanic: u32 = 4;
pub const EcsIdOnDeleteMask: u32 = 7;
pub const EcsIdOnDeleteObjectRemove: u32 = 8;
pub const EcsIdOnDeleteObjectDelete: u32 = 16;
pub const EcsIdOnDeleteObjectPanic: u32 = 32;
pub const EcsIdOnDeleteObjectMask: u32 = 56;
pub const EcsIdExclusive: u32 = 64;
pub const EcsIdDontInherit: u32 = 128;
pub const EcsIdAcyclic: u32 = 256;
pub const EcsIdTag: u32 = 512;
pub const EcsIdWith: u32 = 1024;
pub const EcsIdUnion: u32 = 2048;
pub const EcsIdHasOnAdd: u32 = 32768;
pub const EcsIdHasOnRemove: u32 = 65536;
pub const EcsIdHasOnSet: u32 = 131072;
pub const EcsIdHasUnSet: u32 = 262144;
pub const EcsIdEventMask: u32 = 491520;
pub const EcsIdMarkedForDelete: u32 = 1073741824;
pub const EcsIterIsValid: u32 = 1;
pub const EcsIterIsFilter: u32 = 2;
pub const EcsIterIsInstanced: u32 = 4;
pub const EcsIterHasShared: u32 = 8;
pub const EcsIterTableOnly: u32 = 16;
pub const EcsIterEntityOptional: u32 = 32;
pub const EcsIterNoResults: u32 = 64;
pub const EcsIterIgnoreThis: u32 = 128;
pub const EcsFilterMatchThis: u32 = 2;
pub const EcsFilterMatchOnlyThis: u32 = 4;
pub const EcsFilterMatchPrefab: u32 = 8;
pub const EcsFilterMatchDisabled: u32 = 16;
pub const EcsFilterMatchEmptyTables: u32 = 32;
pub const EcsFilterMatchAnything: u32 = 64;
pub const EcsFilterIsFilter: u32 = 128;
pub const EcsFilterIsInstanced: u32 = 256;
pub const EcsFilterPopulate: u32 = 512;
pub const EcsTableHasBuiltins: u32 = 2;
pub const EcsTableIsPrefab: u32 = 4;
pub const EcsTableHasIsA: u32 = 8;
pub const EcsTableHasChildOf: u32 = 16;
pub const EcsTableHasPairs: u32 = 32;
pub const EcsTableHasModule: u32 = 64;
pub const EcsTableIsDisabled: u32 = 128;
pub const EcsTableHasCtors: u32 = 256;
pub const EcsTableHasDtors: u32 = 512;
pub const EcsTableHasCopy: u32 = 1024;
pub const EcsTableHasMove: u32 = 2048;
pub const EcsTableHasUnion: u32 = 4096;
pub const EcsTableHasToggle: u32 = 8192;
pub const EcsTableHasOverrides: u32 = 16384;
pub const EcsTableHasOnAdd: u32 = 32768;
pub const EcsTableHasOnRemove: u32 = 65536;
pub const EcsTableHasOnSet: u32 = 131072;
pub const EcsTableHasUnSet: u32 = 262144;
pub const EcsTableMarkedForDelete: u32 = 1073741824;
pub const EcsTableHasLifecycle: u32 = 768;
pub const EcsTableIsComplex: u32 = 13056;
pub const EcsTableHasAddActions: u32 = 168200;
pub const EcsTableHasRemoveActions: u32 = 328200;
pub const EcsQueryHasRefs: u32 = 2;
pub const EcsQueryIsSubquery: u32 = 4;
pub const EcsQueryIsOrphaned: u32 = 8;
pub const EcsQueryHasOutColumns: u32 = 16;
pub const EcsQueryHasMonitor: u32 = 32;
pub const EcsAperiodicEmptyTables: u32 = 2;
pub const EcsAperiodicComponentMonitors: u32 = 4;
pub const EcsAperiodicEmptyQueries: u32 = 16;
pub const _ASSERT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const ecs_world_t_magic: u32 = 1701016439;
pub const ecs_stage_t_magic: u32 = 1701016435;
pub const ecs_query_t_magic: u32 = 1701016433;
pub const ecs_rule_t_magic: u32 = 1701016437;
pub const ecs_table_t_magic: u32 = 1701016436;
pub const ecs_filter_t_magic: u32 = 1701016422;
pub const ecs_trigger_t_magic: u32 = 1701016434;
pub const ecs_observer_t_magic: u32 = 1701016418;
pub const ECS_ROW_MASK: u32 = 268435455;
pub const ECS_ROW_FLAGS_MASK: i32 = -268435456;
pub const ECS_ID_FLAGS_MASK: i64 = -72057594037927936;
pub const ECS_ENTITY_MASK: u32 = 4294967295;
pub const ECS_GENERATION_MASK: u64 = 281470681743360;
pub const ECS_COMPONENT_MASK: u64 = 72057594037927935;
pub const ECS_STRBUF_ELEMENT_SIZE: u32 = 511;
pub const ECS_STRBUF_MAX_LIST_DEPTH: u32 = 32;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _ALLOCA_H: u32 = 1;
pub const ECS_ID_CACHE_SIZE: u32 = 32;
pub const ECS_TERM_CACHE_SIZE: u32 = 4;
pub const ECS_TERM_DESC_CACHE_SIZE: u32 = 16;
pub const ECS_OBSERVER_DESC_EVENT_COUNT_MAX: u32 = 8;
pub const ECS_VARIABLE_COUNT_MAX: u32 = 64;
pub const ECS_VARIABLE_CACHE_SIZE: u32 = 4;
pub const EcsSelf: u32 = 2;
pub const EcsUp: u32 = 4;
pub const EcsDown: u32 = 8;
pub const EcsCascade: u32 = 16;
pub const EcsParent: u32 = 32;
pub const EcsIsVariable: u32 = 64;
pub const EcsIsEntity: u32 = 128;
pub const EcsTraverseFlags: u32 = 62;
pub const flecs_iter_cache_ids: u32 = 1;
pub const flecs_iter_cache_columns: u32 = 2;
pub const flecs_iter_cache_sources: u32 = 4;
pub const flecs_iter_cache_sizes: u32 = 8;
pub const flecs_iter_cache_ptrs: u32 = 16;
pub const flecs_iter_cache_match_indices: u32 = 32;
pub const flecs_iter_cache_variables: u32 = 64;
pub const flecs_iter_cache_all: u32 = 255;
pub const ECS_HI_COMPONENT_ID: u32 = 256;
pub const ECS_MAX_RECURSION: u32 = 512;
pub const ECS_MAX_TOKEN_SIZE: u32 = 256;
pub const FLECS__E0: u32 = 0;
pub const ECS_ID_FLAG_BIT: i64 = -9223372036854775808;
pub const EcsFirstUserComponentId: u32 = 32;
pub const EcsFirstUserEntityId: u32 = 384;
pub const ECS_INVALID_OPERATION: u32 = 1;
pub const ECS_INVALID_PARAMETER: u32 = 2;
pub const ECS_CONSTRAINT_VIOLATED: u32 = 3;
pub const ECS_OUT_OF_MEMORY: u32 = 4;
pub const ECS_OUT_OF_RANGE: u32 = 5;
pub const ECS_UNSUPPORTED: u32 = 6;
pub const ECS_INTERNAL_ERROR: u32 = 7;
pub const ECS_ALREADY_DEFINED: u32 = 8;
pub const ECS_MISSING_OS_API: u32 = 9;
pub const ECS_OPERATION_FAILED: u32 = 10;
pub const ECS_INVALID_CONVERSION: u32 = 11;
pub const ECS_ID_IN_USE: u32 = 12;
pub const ECS_CYCLE_DETECTED: u32 = 13;
pub const ECS_INCONSISTENT_NAME: u32 = 20;
pub const ECS_NAME_IN_USE: u32 = 21;
pub const ECS_NOT_A_COMPONENT: u32 = 22;
pub const ECS_INVALID_COMPONENT_SIZE: u32 = 23;
pub const ECS_INVALID_COMPONENT_ALIGNMENT: u32 = 24;
pub const ECS_COMPONENT_NOT_REGISTERED: u32 = 25;
pub const ECS_INCONSISTENT_COMPONENT_ID: u32 = 26;
pub const ECS_INCONSISTENT_COMPONENT_ACTION: u32 = 27;
pub const ECS_MODULE_UNDEFINED: u32 = 28;
pub const ECS_MISSING_SYMBOL: u32 = 29;
pub const ECS_ALREADY_IN_USE: u32 = 30;
pub const ECS_ACCESS_VIOLATION: u32 = 40;
pub const ECS_COLUMN_INDEX_OUT_OF_RANGE: u32 = 41;
pub const ECS_COLUMN_IS_NOT_SHARED: u32 = 42;
pub const ECS_COLUMN_IS_SHARED: u32 = 43;
pub const ECS_COLUMN_TYPE_MISMATCH: u32 = 45;
pub const ECS_INVALID_WHILE_READONLY: u32 = 70;
pub const ECS_LOCKED_STORAGE: u32 = 71;
pub const ECS_INVALID_FROM_WORKER: u32 = 72;
pub const ECS_BLACK: &[u8; 8usize] = b"\x1B[1;30m\0";
pub const ECS_RED: &[u8; 8usize] = b"\x1B[0;31m\0";
pub const ECS_GREEN: &[u8; 8usize] = b"\x1B[0;32m\0";
pub const ECS_YELLOW: &[u8; 8usize] = b"\x1B[0;33m\0";
pub const ECS_BLUE: &[u8; 8usize] = b"\x1B[0;34m\0";
pub const ECS_MAGENTA: &[u8; 8usize] = b"\x1B[0;35m\0";
pub const ECS_CYAN: &[u8; 8usize] = b"\x1B[0;36m\0";
pub const ECS_WHITE: &[u8; 8usize] = b"\x1B[1;37m\0";
pub const ECS_GREY: &[u8; 8usize] = b"\x1B[0;37m\0";
pub const ECS_NORMAL: &[u8; 8usize] = b"\x1B[0;49m\0";
pub const ECS_BOLD: &[u8; 8usize] = b"\x1B[1;49m\0";
pub const ECS_REST_DEFAULT_PORT: u32 = 27750;
pub const ECS_STAT_WINDOW: u32 = 60;
pub const ECS_MEMBER_DESC_CACHE_SIZE: u32 = 32;
pub const ECS_META_MAX_SCOPE_DEPTH: u32 = 32;
pub const ECS_HTTP_HEADER_COUNT_MAX: u32 = 32;
pub const ECS_HTTP_QUERY_PARAM_COUNT_MAX: u32 = 32;
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type ecs_flags8_t = u8;
pub type ecs_flags16_t = u16;
pub type ecs_flags32_t = u32;
pub type ecs_flags64_t = u64;
pub type ecs_size_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_vector_t {
    _unused: [u8; 0],
}
pub type ecs_comparator_t = ::std::option::Option<
    unsafe extern "C" fn(
        p1: *const ::std::os::raw::c_void,
        p2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn _ecs_vector_new(
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> *mut ecs_vector_t;
}
extern "C" {
    pub fn _ecs_vector_from_array(
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
        array: *mut ::std::os::raw::c_void,
    ) -> *mut ecs_vector_t;
}
extern "C" {
    pub fn _ecs_vector_zero(vector: *mut ecs_vector_t, elem_size: ecs_size_t, offset: i16);
}
extern "C" {
    pub fn ecs_vector_free(vector: *mut ecs_vector_t);
}
extern "C" {
    pub fn ecs_vector_clear(vector: *mut ecs_vector_t);
}
extern "C" {
    pub fn ecs_vector_assert_size(vector_inout: *mut ecs_vector_t, elem_size: ecs_size_t);
}
extern "C" {
    pub fn _ecs_vector_add(
        array_inout: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_vector_insert_at(
        array_inout: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_vector_addn(
        array_inout: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_vector_get(
        vector: *const ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_vector_last(
        vector: *const ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_vector_set_min_size(
        array_inout: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> i32;
}
extern "C" {
    pub fn _ecs_vector_set_min_count(
        vector_inout: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> i32;
}
extern "C" {
    pub fn ecs_vector_remove_last(vector: *mut ecs_vector_t);
}
extern "C" {
    pub fn _ecs_vector_pop(
        vector: *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn _ecs_vector_move_index(
        dst: *mut *mut ecs_vector_t,
        src: *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn _ecs_vector_remove(
        vector: *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn _ecs_vector_reclaim(vector: *mut *mut ecs_vector_t, elem_size: ecs_size_t, offset: i16);
}
extern "C" {
    pub fn _ecs_vector_grow(
        vector: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> i32;
}
extern "C" {
    pub fn _ecs_vector_set_size(
        vector: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> i32;
}
extern "C" {
    pub fn _ecs_vector_set_count(
        vector: *mut *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        elem_count: i32,
    ) -> i32;
}
extern "C" {
    pub fn ecs_vector_count(vector: *const ecs_vector_t) -> i32;
}
extern "C" {
    pub fn ecs_vector_size(vector: *const ecs_vector_t) -> i32;
}
extern "C" {
    pub fn _ecs_vector_first(
        vector: *const ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_vector_sort(
        vector: *mut ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        compare_action: ecs_comparator_t,
    );
}
extern "C" {
    pub fn _ecs_vector_memory(
        vector: *const ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
        allocd: *mut i32,
        used: *mut i32,
    );
}
extern "C" {
    pub fn _ecs_vector_copy(
        src: *const ecs_vector_t,
        elem_size: ecs_size_t,
        offset: i16,
    ) -> *mut ecs_vector_t;
}
pub type ecs_map_key_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bucket_entry_t {
    pub next: *mut ecs_bucket_entry_t,
    pub key: ecs_map_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_block_allocator_block_t {
    pub memory: *mut ::std::os::raw::c_void,
    pub next: *mut ecs_block_allocator_block_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_block_allocator_chunk_header_t {
    pub next: *mut ecs_block_allocator_chunk_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_block_allocator_t {
    pub head: *mut ecs_block_allocator_chunk_header_t,
    pub block_head: *mut ecs_block_allocator_block_t,
    pub block_tail: *mut ecs_block_allocator_block_t,
    pub chunk_size: i32,
    pub chunks_per_block: i32,
    pub block_size: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bucket_t {
    pub first: *mut ecs_bucket_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_map_t {
    pub buckets: *mut ecs_bucket_t,
    pub buckets_end: *mut ecs_bucket_t,
    pub elem_size: i16,
    pub bucket_shift: u8,
    pub bucket_count: i32,
    pub count: i32,
    pub allocator: ecs_block_allocator_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_map_iter_t {
    pub map: *const ecs_map_t,
    pub bucket: *mut ecs_bucket_t,
    pub entry: *mut ecs_bucket_entry_t,
}
extern "C" {
    pub fn _ecs_map_init(map: *mut ecs_map_t, elem_size: ecs_size_t, elem_count: i32);
}
extern "C" {
    pub fn ecs_map_fini(map: *mut ecs_map_t);
}
extern "C" {
    pub fn _ecs_map_new(elem_size: ecs_size_t, elem_count: i32) -> *mut ecs_map_t;
}
extern "C" {
    pub fn ecs_map_is_initialized(result: *const ecs_map_t) -> bool;
}
extern "C" {
    pub fn _ecs_map_get(
        map: *const ecs_map_t,
        elem_size: ecs_size_t,
        key: ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_map_get_ptr(
        map: *const ecs_map_t,
        key: ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_map_has(map: *const ecs_map_t, key: ecs_map_key_t) -> bool;
}
extern "C" {
    pub fn _ecs_map_ensure(
        map: *mut ecs_map_t,
        elem_size: ecs_size_t,
        key: ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_map_set(
        map: *mut ecs_map_t,
        elem_size: ecs_size_t,
        key: ecs_map_key_t,
        payload: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_map_free(map: *mut ecs_map_t);
}
extern "C" {
    pub fn ecs_map_remove(map: *mut ecs_map_t, key: ecs_map_key_t) -> i32;
}
extern "C" {
    pub fn ecs_map_clear(map: *mut ecs_map_t);
}
extern "C" {
    pub fn ecs_map_count(map: *const ecs_map_t) -> i32;
}
extern "C" {
    pub fn ecs_map_bucket_count(map: *const ecs_map_t) -> i32;
}
extern "C" {
    pub fn ecs_map_iter(map: *const ecs_map_t) -> ecs_map_iter_t;
}
extern "C" {
    pub fn _ecs_map_next(
        iter: *mut ecs_map_iter_t,
        elem_size: ecs_size_t,
        key: *mut ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_map_next_ptr(
        iter: *mut ecs_map_iter_t,
        key: *mut ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_map_grow(map: *mut ecs_map_t, elem_count: i32);
}
extern "C" {
    pub fn ecs_map_set_size(map: *mut ecs_map_t, elem_count: i32);
}
extern "C" {
    pub fn ecs_map_copy(map: *mut ecs_map_t) -> *mut ecs_map_t;
}
extern "C" {
    pub fn ecs_map_memory(map: *mut ecs_map_t, allocd: *mut i32, used: *mut i32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_element {
    pub buffer_embedded: bool,
    pub pos: i32,
    pub buf: *mut ::std::os::raw::c_char,
    pub next: *mut ecs_strbuf_element,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_element_embedded {
    pub super_: ecs_strbuf_element,
    pub buf: [::std::os::raw::c_char; 512usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_element_str {
    pub super_: ecs_strbuf_element,
    pub alloc_str: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_list_elem {
    pub count: i32,
    pub separator: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_t {
    pub buf: *mut ::std::os::raw::c_char,
    pub max: i32,
    pub size: i32,
    pub elementCount: i32,
    pub firstElement: ecs_strbuf_element_embedded,
    pub current: *mut ecs_strbuf_element,
    pub list_stack: [ecs_strbuf_list_elem; 32usize],
    pub list_sp: i32,
    pub content: *mut ::std::os::raw::c_char,
    pub length: i32,
}
extern "C" {
    pub fn ecs_strbuf_append(
        buffer: *mut ecs_strbuf_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_vappend(
        buffer: *mut ecs_strbuf_t,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendch(buffer: *mut ecs_strbuf_t, ch: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendflt(
        buffer: *mut ecs_strbuf_t,
        v: f64,
        nan_delim: ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_mergebuff(
        dst_buffer: *mut ecs_strbuf_t,
        src_buffer: *mut ecs_strbuf_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr_zerocpy(
        buffer: *mut ecs_strbuf_t,
        str_: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr_zerocpy_const(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstrn(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
        n: i32,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_get(buffer: *mut ecs_strbuf_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_strbuf_get_small(buffer: *mut ecs_strbuf_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_strbuf_reset(buffer: *mut ecs_strbuf_t);
}
extern "C" {
    pub fn ecs_strbuf_list_push(
        buffer: *mut ecs_strbuf_t,
        list_open: *const ::std::os::raw::c_char,
        separator: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_strbuf_list_pop(
        buffer: *mut ecs_strbuf_t,
        list_close: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_strbuf_list_next(buffer: *mut ecs_strbuf_t);
}
extern "C" {
    pub fn ecs_strbuf_list_append(
        buffer: *mut ecs_strbuf_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_list_appendstr(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_written(buffer: *const ecs_strbuf_t) -> i32;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_time_t {
    pub sec: u32,
    pub nanosec: u32,
}
extern "C" {
    pub static mut ecs_os_api_malloc_count: i64;
}
extern "C" {
    pub static mut ecs_os_api_realloc_count: i64;
}
extern "C" {
    pub static mut ecs_os_api_calloc_count: i64;
}
extern "C" {
    pub static mut ecs_os_api_free_count: i64;
}
pub type ecs_os_thread_t = usize;
pub type ecs_os_cond_t = usize;
pub type ecs_os_mutex_t = usize;
pub type ecs_os_dl_t = usize;
pub type ecs_os_sock_t = usize;
pub type ecs_os_proc_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_init_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_fini_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_malloc_t =
    ::std::option::Option<unsafe extern "C" fn(size: ecs_size_t) -> *mut ::std::os::raw::c_void>;
pub type ecs_os_api_free_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type ecs_os_api_realloc_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_calloc_t =
    ::std::option::Option<unsafe extern "C" fn(size: ecs_size_t) -> *mut ::std::os::raw::c_void>;
pub type ecs_os_api_strdup_t = ::std::option::Option<
    unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
pub type ecs_os_thread_callback_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_thread_new_t = ::std::option::Option<
    unsafe extern "C" fn(
        callback: ecs_os_thread_callback_t,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_os_thread_t,
>;
pub type ecs_os_api_thread_join_t = ::std::option::Option<
    unsafe extern "C" fn(thread: ecs_os_thread_t) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_ainc_t =
    ::std::option::Option<unsafe extern "C" fn(value: *mut i32) -> ::std::os::raw::c_int>;
pub type ecs_os_api_mutex_new_t = ::std::option::Option<unsafe extern "C" fn() -> ecs_os_mutex_t>;
pub type ecs_os_api_mutex_lock_t =
    ::std::option::Option<unsafe extern "C" fn(mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_mutex_unlock_t =
    ::std::option::Option<unsafe extern "C" fn(mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_mutex_free_t =
    ::std::option::Option<unsafe extern "C" fn(mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_cond_new_t = ::std::option::Option<unsafe extern "C" fn() -> ecs_os_cond_t>;
pub type ecs_os_api_cond_free_t = ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t)>;
pub type ecs_os_api_cond_signal_t =
    ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t)>;
pub type ecs_os_api_cond_broadcast_t =
    ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t)>;
pub type ecs_os_api_cond_wait_t =
    ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t, mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_sleep_t = ::std::option::Option<unsafe extern "C" fn(sec: i32, nanosec: i32)>;
pub type ecs_os_api_enable_high_timer_resolution_t =
    ::std::option::Option<unsafe extern "C" fn(enable: bool)>;
pub type ecs_os_api_get_time_t =
    ::std::option::Option<unsafe extern "C" fn(time_out: *mut ecs_time_t)>;
pub type ecs_os_api_now_t = ::std::option::Option<unsafe extern "C" fn() -> u64>;
pub type ecs_os_api_log_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    ),
>;
pub type ecs_os_api_abort_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_dlopen_t = ::std::option::Option<
    unsafe extern "C" fn(libname: *const ::std::os::raw::c_char) -> ecs_os_dl_t,
>;
pub type ecs_os_api_dlproc_t = ::std::option::Option<
    unsafe extern "C" fn(
        lib: ecs_os_dl_t,
        procname: *const ::std::os::raw::c_char,
    ) -> ecs_os_proc_t,
>;
pub type ecs_os_api_dlclose_t = ::std::option::Option<unsafe extern "C" fn(lib: ecs_os_dl_t)>;
pub type ecs_os_api_module_to_path_t = ::std::option::Option<
    unsafe extern "C" fn(module_id: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_os_api_t {
    pub init_: ecs_os_api_init_t,
    pub fini_: ecs_os_api_fini_t,
    pub malloc_: ecs_os_api_malloc_t,
    pub realloc_: ecs_os_api_realloc_t,
    pub calloc_: ecs_os_api_calloc_t,
    pub free_: ecs_os_api_free_t,
    pub strdup_: ecs_os_api_strdup_t,
    pub thread_new_: ecs_os_api_thread_new_t,
    pub thread_join_: ecs_os_api_thread_join_t,
    pub ainc_: ecs_os_api_ainc_t,
    pub adec_: ecs_os_api_ainc_t,
    pub mutex_new_: ecs_os_api_mutex_new_t,
    pub mutex_free_: ecs_os_api_mutex_free_t,
    pub mutex_lock_: ecs_os_api_mutex_lock_t,
    pub mutex_unlock_: ecs_os_api_mutex_lock_t,
    pub cond_new_: ecs_os_api_cond_new_t,
    pub cond_free_: ecs_os_api_cond_free_t,
    pub cond_signal_: ecs_os_api_cond_signal_t,
    pub cond_broadcast_: ecs_os_api_cond_broadcast_t,
    pub cond_wait_: ecs_os_api_cond_wait_t,
    pub sleep_: ecs_os_api_sleep_t,
    pub now_: ecs_os_api_now_t,
    pub get_time_: ecs_os_api_get_time_t,
    pub log_: ecs_os_api_log_t,
    pub abort_: ecs_os_api_abort_t,
    pub dlopen_: ecs_os_api_dlopen_t,
    pub dlproc_: ecs_os_api_dlproc_t,
    pub dlclose_: ecs_os_api_dlclose_t,
    pub module_to_dl_: ecs_os_api_module_to_path_t,
    pub module_to_etc_: ecs_os_api_module_to_path_t,
    pub log_level_: i32,
    pub log_indent_: i32,
    pub log_last_error_: i32,
    pub log_last_timestamp_: i64,
    pub flags_: ecs_flags32_t,
}
extern "C" {
    pub static mut ecs_os_api: ecs_os_api_t;
}
extern "C" {
    pub fn ecs_os_init();
}
extern "C" {
    pub fn ecs_os_fini();
}
extern "C" {
    pub fn ecs_os_set_api(os_api: *mut ecs_os_api_t);
}
extern "C" {
    pub fn ecs_os_set_api_defaults();
}
extern "C" {
    pub fn ecs_os_dbg(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_trace(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_warn(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_err(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_fatal(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_sleepf(t: f64);
}
extern "C" {
    pub fn ecs_time_measure(start: *mut ecs_time_t) -> f64;
}
extern "C" {
    pub fn ecs_time_sub(t1: ecs_time_t, t2: ecs_time_t) -> ecs_time_t;
}
extern "C" {
    pub fn ecs_time_to_double(t: ecs_time_t) -> f64;
}
extern "C" {
    pub fn ecs_os_memdup(
        src: *const ::std::os::raw::c_void,
        size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_os_has_heap() -> bool;
}
extern "C" {
    pub fn ecs_os_has_threading() -> bool;
}
extern "C" {
    pub fn ecs_os_has_time() -> bool;
}
extern "C" {
    pub fn ecs_os_has_logging() -> bool;
}
extern "C" {
    pub fn ecs_os_has_dl() -> bool;
}
extern "C" {
    pub fn ecs_os_has_modules() -> bool;
}
pub type ecs_poly_t = ::std::os::raw::c_void;
pub type ecs_id_t = u64;
pub type ecs_entity_t = ecs_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_type_t {
    pub array: *mut ecs_id_t,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_world_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_mixins_t {
    _unused: [u8; 0],
}
pub type ecs_run_action_t = ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t)>;
pub type ecs_iter_action_t = ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t)>;
pub type ecs_iter_init_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *const ecs_world_t,
        iterable: *const ecs_poly_t,
        it: *mut ecs_iter_t,
        filter: *mut ecs_term_t,
    ),
>;
pub type ecs_iter_next_action_t =
    ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t) -> bool>;
pub type ecs_iter_fini_action_t = ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t)>;
pub type ecs_order_by_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        e1: ecs_entity_t,
        ptr1: *const ::std::os::raw::c_void,
        e2: ecs_entity_t,
        ptr2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ecs_sort_table_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        entities: *mut ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
        size: i32,
        lo: i32,
        hi: i32,
        order_by: ecs_order_by_action_t,
    ),
>;
pub type ecs_group_by_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        group_id: ecs_id_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> u64,
>;
pub type ecs_module_action_t = ::std::option::Option<unsafe extern "C" fn(world: *mut ecs_world_t)>;
pub type ecs_fini_action_t = ::std::option::Option<
    unsafe extern "C" fn(world: *mut ecs_world_t, ctx: *mut ::std::os::raw::c_void),
>;
pub type ecs_ctx_free_t =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
pub type ecs_compare_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr1: *const ::std::os::raw::c_void,
        ptr2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ecs_hash_value_action_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> u64>;
pub type ecs_xtor_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        count: i32,
        type_info: *const ecs_type_info_t,
    ),
>;
pub type ecs_copy_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *const ::std::os::raw::c_void,
        count: i32,
        type_info: *const ecs_type_info_t,
    ),
>;
pub type ecs_move_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *mut ::std::os::raw::c_void,
        count: i32,
        type_info: *const ecs_type_info_t,
    ),
>;
pub type ecs_poly_dtor_t = ::std::option::Option<unsafe extern "C" fn(poly: *mut ecs_poly_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_header_t {
    pub magic: i32,
    pub type_: i32,
    pub mixins: *mut ecs_mixins_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_iterable_t {
    pub init: ecs_iter_init_action_t,
}
pub const ecs_inout_kind_t_EcsInOutDefault: ecs_inout_kind_t = 0;
pub const ecs_inout_kind_t_EcsInOutNone: ecs_inout_kind_t = 1;
pub const ecs_inout_kind_t_EcsInOut: ecs_inout_kind_t = 2;
pub const ecs_inout_kind_t_EcsIn: ecs_inout_kind_t = 3;
pub const ecs_inout_kind_t_EcsOut: ecs_inout_kind_t = 4;
pub type ecs_inout_kind_t = ::std::os::raw::c_uint;
pub const ecs_oper_kind_t_EcsAnd: ecs_oper_kind_t = 0;
pub const ecs_oper_kind_t_EcsOr: ecs_oper_kind_t = 1;
pub const ecs_oper_kind_t_EcsNot: ecs_oper_kind_t = 2;
pub const ecs_oper_kind_t_EcsOptional: ecs_oper_kind_t = 3;
pub const ecs_oper_kind_t_EcsAndFrom: ecs_oper_kind_t = 4;
pub const ecs_oper_kind_t_EcsOrFrom: ecs_oper_kind_t = 5;
pub const ecs_oper_kind_t_EcsNotFrom: ecs_oper_kind_t = 6;
pub type ecs_oper_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_term_id_t {
    pub id: ecs_entity_t,
    pub name: *mut ::std::os::raw::c_char,
    pub trav: ecs_entity_t,
    pub flags: ecs_flags32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_term_t {
    pub id: ecs_id_t,
    pub src: ecs_term_id_t,
    pub first: ecs_term_id_t,
    pub second: ecs_term_id_t,
    pub inout: ecs_inout_kind_t,
    pub oper: ecs_oper_kind_t,
    pub id_flags: ecs_id_t,
    pub name: *mut ::std::os::raw::c_char,
    pub index: i32,
    pub move_: bool,
}
extern "C" {
    pub static mut ECS_FILTER_INIT: ecs_filter_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_filter_t {
    pub hdr: ecs_header_t,
    pub terms: *mut ecs_term_t,
    pub term_count: i32,
    pub term_count_actual: i32,
    pub owned: bool,
    pub terms_owned: bool,
    pub flags: ecs_flags32_t,
    pub name: *mut ::std::os::raw::c_char,
    pub variable_names: [*mut ::std::os::raw::c_char; 1usize],
    pub iterable: ecs_iterable_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_observer_t {
    pub hdr: ecs_header_t,
    pub filter: ecs_filter_t,
    pub events: [ecs_entity_t; 8usize],
    pub event_count: i32,
    pub callback: ecs_iter_action_t,
    pub run: ecs_run_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
    pub observable: *mut ecs_observable_t,
    pub last_event_id: *mut i32,
    pub register_id: ecs_id_t,
    pub term_index: i32,
    pub is_monitor: bool,
    pub is_multi: bool,
    pub world: *mut ecs_world_t,
    pub entity: ecs_entity_t,
    pub dtor: ecs_poly_dtor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_type_hooks_t {
    pub ctor: ecs_xtor_t,
    pub dtor: ecs_xtor_t,
    pub copy: ecs_copy_t,
    pub move_: ecs_move_t,
    pub copy_ctor: ecs_copy_t,
    pub move_ctor: ecs_move_t,
    pub ctor_move_dtor: ecs_move_t,
    pub move_dtor: ecs_move_t,
    pub on_add: ecs_iter_action_t,
    pub on_set: ecs_iter_action_t,
    pub on_remove: ecs_iter_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_type_info_t {
    pub size: ecs_size_t,
    pub alignment: ecs_size_t,
    pub hooks: ecs_type_hooks_t,
    pub component: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_stage_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_column_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_data_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_switch_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_id_record_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_table_node_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_record_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_observable_t {
    pub events: *mut ecs_sparse_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_record_t {
    pub table: *mut ecs_table_t,
    pub row: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_range_t {
    pub table: *mut ecs_table_t,
    pub offset: i32,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_var_t {
    pub range: ecs_table_range_t,
    pub entity: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_ref_t {
    pub entity: ecs_entity_t,
    pub id: ecs_entity_t,
    pub tr: *mut ecs_table_record_t,
    pub record: *mut ecs_record_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_page_iter_t {
    pub offset: i32,
    pub limit: i32,
    pub remaining: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_worker_iter_t {
    pub index: i32,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_cache_iter_t {
    pub cur: *mut ecs_table_cache_hdr_t,
    pub next: *mut ecs_table_cache_hdr_t,
    pub next_list: *mut ecs_table_cache_hdr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_term_iter_t {
    pub term: ecs_term_t,
    pub self_index: *mut ecs_id_record_t,
    pub set_index: *mut ecs_id_record_t,
    pub cur: *mut ecs_id_record_t,
    pub it: ecs_table_cache_iter_t,
    pub index: i32,
    pub table: *mut ecs_table_t,
    pub cur_match: i32,
    pub match_count: i32,
    pub last_column: i32,
    pub empty_tables: bool,
    pub id: ecs_id_t,
    pub column: i32,
    pub subject: ecs_entity_t,
    pub size: ecs_size_t,
    pub ptr: *mut ::std::os::raw::c_void,
}
pub const ecs_iter_kind_t_EcsIterEvalCondition: ecs_iter_kind_t = 0;
pub const ecs_iter_kind_t_EcsIterEvalTables: ecs_iter_kind_t = 1;
pub const ecs_iter_kind_t_EcsIterEvalChain: ecs_iter_kind_t = 2;
pub const ecs_iter_kind_t_EcsIterEvalNone: ecs_iter_kind_t = 3;
pub type ecs_iter_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_filter_iter_t {
    pub filter: *const ecs_filter_t,
    pub kind: ecs_iter_kind_t,
    pub term_iter: ecs_term_iter_t,
    pub matches_left: i32,
    pub pivot_term: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_iter_t {
    pub query: *mut ecs_query_t,
    pub node: *mut ecs_query_table_node_t,
    pub prev: *mut ecs_query_table_node_t,
    pub sparse_smallest: i32,
    pub sparse_first: i32,
    pub bitset_first: i32,
    pub skip_count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_snapshot_iter_t {
    pub filter: ecs_filter_t,
    pub tables: *mut ecs_vector_t,
    pub index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_sparse_iter_t {
    pub sparse: *mut ecs_sparse_t,
    pub ids: *const u64,
    pub size: ecs_size_t,
    pub i: i32,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_iter_t {
    pub rule: *const ecs_rule_t,
    pub registers: *mut ecs_var_t,
    pub op_ctx: *mut ecs_rule_op_ctx_t,
    pub columns: *mut i32,
    pub entity: ecs_entity_t,
    pub redo: bool,
    pub op: i32,
    pub sp: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_iter_cache_t {
    pub ids: [ecs_id_t; 4usize],
    pub columns: [i32; 4usize],
    pub sources: [ecs_entity_t; 4usize],
    pub sizes: [ecs_size_t; 4usize],
    pub ptrs: [*mut ::std::os::raw::c_void; 4usize],
    pub match_indices: [i32; 4usize],
    pub variables: [ecs_var_t; 4usize],
    pub used: ecs_flags8_t,
    pub allocated: ecs_flags8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_iter_private_t {
    pub iter: ecs_iter_private_t__bindgen_ty_1,
    pub cache: ecs_iter_cache_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ecs_iter_private_t__bindgen_ty_1 {
    pub term: ecs_term_iter_t,
    pub filter: ecs_filter_iter_t,
    pub query: ecs_query_iter_t,
    pub rule: ecs_rule_iter_t,
    pub snapshot: ecs_snapshot_iter_t,
    pub page: ecs_page_iter_t,
    pub worker: ecs_worker_iter_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_iter_t {
    pub world: *mut ecs_world_t,
    pub real_world: *mut ecs_world_t,
    pub entities: *mut ecs_entity_t,
    pub ptrs: *mut *mut ::std::os::raw::c_void,
    pub sizes: *mut ecs_size_t,
    pub table: *mut ecs_table_t,
    pub other_table: *mut ecs_table_t,
    pub ids: *mut ecs_id_t,
    pub variables: *mut ecs_var_t,
    pub columns: *mut i32,
    pub sources: *mut ecs_entity_t,
    pub match_indices: *mut i32,
    pub references: *mut ecs_ref_t,
    pub constrained_vars: ecs_flags64_t,
    pub system: ecs_entity_t,
    pub event: ecs_entity_t,
    pub event_id: ecs_id_t,
    pub terms: *mut ecs_term_t,
    pub table_count: i32,
    pub term_count: i32,
    pub term_index: i32,
    pub variable_count: i32,
    pub variable_names: *mut *mut ::std::os::raw::c_char,
    pub param: *mut ::std::os::raw::c_void,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub delta_time: f32,
    pub delta_system_time: f32,
    pub frame_offset: i32,
    pub offset: i32,
    pub count: i32,
    pub instance_count: i32,
    pub flags: ecs_flags32_t,
    pub interrupted_by: ecs_entity_t,
    pub priv_: ecs_iter_private_t,
    pub next: ecs_iter_next_action_t,
    pub callback: ecs_iter_action_t,
    pub fini: ecs_iter_fini_action_t,
    pub chain_it: *mut ecs_iter_t,
}
extern "C" {
    pub fn ecs_module_path_from_c(
        c_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_identifier_is_0(id: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ecs_default_ctor(
        ptr: *mut ::std::os::raw::c_void,
        count: i32,
        ctx: *const ecs_type_info_t,
    );
}
extern "C" {
    pub fn ecs_vasprintf(
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_asprintf(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_sparse_t {
    pub dense: *mut ecs_vector_t,
    pub chunks: *mut ecs_vector_t,
    pub size: ecs_size_t,
    pub count: i32,
    pub max_id_local: u64,
    pub max_id: *mut u64,
}
extern "C" {
    pub fn _flecs_sparse_init(sparse: *mut ecs_sparse_t, elem_size: ecs_size_t);
}
extern "C" {
    pub fn _flecs_sparse_new(elem_size: ecs_size_t) -> *mut ecs_sparse_t;
}
extern "C" {
    pub fn _flecs_sparse_fini(sparse: *mut ecs_sparse_t);
}
extern "C" {
    pub fn flecs_sparse_free(sparse: *mut ecs_sparse_t);
}
extern "C" {
    pub fn flecs_sparse_clear(sparse: *mut ecs_sparse_t);
}
extern "C" {
    pub fn flecs_sparse_set_id_source(sparse: *mut ecs_sparse_t, id_source: *mut u64);
}
extern "C" {
    pub fn _flecs_sparse_add(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_last_id(sparse: *const ecs_sparse_t) -> u64;
}
extern "C" {
    pub fn flecs_sparse_new_id(sparse: *mut ecs_sparse_t) -> u64;
}
extern "C" {
    pub fn flecs_sparse_new_ids(sparse: *mut ecs_sparse_t, count: i32) -> *const u64;
}
extern "C" {
    pub fn flecs_sparse_remove(sparse: *mut ecs_sparse_t, id: u64);
}
extern "C" {
    pub fn _flecs_sparse_remove_get(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_exists(sparse: *const ecs_sparse_t, id: u64) -> bool;
}
extern "C" {
    pub fn flecs_sparse_is_alive(sparse: *const ecs_sparse_t, id: u64) -> bool;
}
extern "C" {
    pub fn flecs_sparse_get_alive(sparse: *const ecs_sparse_t, id: u64) -> u64;
}
extern "C" {
    pub fn _flecs_sparse_get_dense(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_count(sparse: *const ecs_sparse_t) -> i32;
}
extern "C" {
    pub fn flecs_sparse_not_alive_count(sparse: *const ecs_sparse_t) -> i32;
}
extern "C" {
    pub fn flecs_sparse_size(sparse: *const ecs_sparse_t) -> i32;
}
extern "C" {
    pub fn _flecs_sparse_get(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _flecs_sparse_get_any(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _flecs_sparse_ensure(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _flecs_sparse_set(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_ids(sparse: *const ecs_sparse_t) -> *const u64;
}
extern "C" {
    pub fn flecs_sparse_set_size(sparse: *mut ecs_sparse_t, elem_count: i32);
}
extern "C" {
    pub fn flecs_sparse_copy(src: *const ecs_sparse_t) -> *mut ecs_sparse_t;
}
extern "C" {
    pub fn flecs_sparse_restore(dst: *mut ecs_sparse_t, src: *const ecs_sparse_t);
}
extern "C" {
    pub fn flecs_sparse_memory(sparse: *mut ecs_sparse_t, allocd: *mut i32, used: *mut i32);
}
extern "C" {
    pub fn _flecs_sparse_iter(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
    ) -> ecs_sparse_iter_t;
}
extern "C" {
    pub fn _ecs_sparse_new(elem_size: ecs_size_t) -> *mut ecs_sparse_t;
}
extern "C" {
    pub fn _ecs_sparse_add(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_sparse_last_id(sparse: *const ecs_sparse_t) -> u64;
}
extern "C" {
    pub fn ecs_sparse_count(sparse: *const ecs_sparse_t) -> i32;
}
extern "C" {
    pub fn flecs_sparse_set_generation(sparse: *mut ecs_sparse_t, id: u64);
}
extern "C" {
    pub fn _ecs_sparse_get_dense(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_sparse_get(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_hm_bucket_t {
    pub keys: *mut ecs_vector_t,
    pub values: *mut ecs_vector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_hashmap_t {
    pub hash: ecs_hash_value_action_t,
    pub compare: ecs_compare_action_t,
    pub key_size: ecs_size_t,
    pub value_size: ecs_size_t,
    pub impl_: ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flecs_hashmap_iter_t {
    pub it: ecs_map_iter_t,
    pub bucket: *mut ecs_hm_bucket_t,
    pub index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flecs_hashmap_result_t {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub hash: u64,
}
extern "C" {
    pub fn _flecs_hashmap_init(
        hm: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        value_size: ecs_size_t,
        hash: ecs_hash_value_action_t,
        compare: ecs_compare_action_t,
    );
}
extern "C" {
    pub fn flecs_hashmap_fini(map: *mut ecs_hashmap_t);
}
extern "C" {
    pub fn _flecs_hashmap_get(
        map: *const ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _flecs_hashmap_ensure(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
    ) -> flecs_hashmap_result_t;
}
extern "C" {
    pub fn _flecs_hashmap_set(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *mut ::std::os::raw::c_void,
        value_size: ecs_size_t,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _flecs_hashmap_remove(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
    );
}
extern "C" {
    pub fn _flecs_hashmap_remove_w_hash(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
        hash: u64,
    );
}
extern "C" {
    pub fn flecs_hashmap_get_bucket(map: *const ecs_hashmap_t, hash: u64) -> *mut ecs_hm_bucket_t;
}
extern "C" {
    pub fn flecs_hm_bucket_remove(
        map: *mut ecs_hashmap_t,
        bucket: *mut ecs_hm_bucket_t,
        hash: u64,
        index: i32,
    );
}
extern "C" {
    pub fn flecs_hashmap_copy(src: *const ecs_hashmap_t, dst: *mut ecs_hashmap_t);
}
extern "C" {
    pub fn flecs_hashmap_iter(map: *mut ecs_hashmap_t) -> flecs_hashmap_iter_t;
}
extern "C" {
    pub fn _flecs_hashmap_next(
        it: *mut flecs_hashmap_iter_t,
        key_size: ecs_size_t,
        key_out: *mut ::std::os::raw::c_void,
        value_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_entity_desc_t {
    pub _canary: i32,
    pub id: ecs_entity_t,
    pub name: *const ::std::os::raw::c_char,
    pub sep: *const ::std::os::raw::c_char,
    pub root_sep: *const ::std::os::raw::c_char,
    pub symbol: *const ::std::os::raw::c_char,
    pub use_low_id: bool,
    pub add: [ecs_id_t; 32usize],
    pub add_expr: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bulk_desc_t {
    pub _canary: i32,
    pub entities: *mut ecs_entity_t,
    pub count: i32,
    pub ids: [ecs_id_t; 32usize],
    pub data: *mut *mut ::std::os::raw::c_void,
    pub table: *mut ecs_table_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_component_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub type_: ecs_type_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_filter_desc_t {
    pub _canary: i32,
    pub terms: [ecs_term_t; 16usize],
    pub terms_buffer: *mut ecs_term_t,
    pub terms_buffer_count: i32,
    pub storage: *mut ecs_filter_t,
    pub instanced: bool,
    pub flags: ecs_flags32_t,
    pub expr: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_desc_t {
    pub _canary: i32,
    pub filter: ecs_filter_desc_t,
    pub order_by_component: ecs_entity_t,
    pub order_by: ecs_order_by_action_t,
    pub sort_table: ecs_sort_table_action_t,
    pub group_by_id: ecs_id_t,
    pub group_by: ecs_group_by_action_t,
    pub group_by_ctx: *mut ::std::os::raw::c_void,
    pub group_by_ctx_free: ecs_ctx_free_t,
    pub parent: *mut ecs_query_t,
    pub entity: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_observer_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub filter: ecs_filter_desc_t,
    pub events: [ecs_entity_t; 8usize],
    pub yield_existing: bool,
    pub callback: ecs_iter_action_t,
    pub run: ecs_run_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
    pub observable: *mut ecs_poly_t,
    pub last_event_id: *mut i32,
    pub term_index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsIdentifier {
    pub value: *mut ::std::os::raw::c_char,
    pub length: ecs_size_t,
    pub hash: u64,
    pub index_hash: u64,
    pub index: *mut ecs_hashmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsComponent {
    pub size: ecs_size_t,
    pub alignment: ecs_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsPoly {
    pub poly: *mut ecs_poly_t,
}
pub type EcsIterable = ecs_iterable_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_world_info_t {
    pub last_component_id: ecs_entity_t,
    pub last_id: ecs_entity_t,
    pub min_id: ecs_entity_t,
    pub max_id: ecs_entity_t,
    pub delta_time_raw: f32,
    pub delta_time: f32,
    pub time_scale: f32,
    pub target_fps: f32,
    pub frame_time_total: f32,
    pub system_time_total: f32,
    pub merge_time_total: f32,
    pub world_time_total: f32,
    pub world_time_total_raw: f32,
    pub frame_count_total: i32,
    pub merge_count_total: i32,
    pub id_create_total: i32,
    pub id_delete_total: i32,
    pub table_create_total: i32,
    pub table_delete_total: i32,
    pub pipeline_build_count_total: i32,
    pub systems_ran_frame: i32,
    pub id_count: i32,
    pub tag_id_count: i32,
    pub component_id_count: i32,
    pub pair_id_count: i32,
    pub wildcard_id_count: i32,
    pub table_count: i32,
    pub tag_table_count: i32,
    pub trivial_table_count: i32,
    pub empty_table_count: i32,
    pub table_record_count: i32,
    pub table_storage_count: i32,
    pub new_count: i32,
    pub bulk_new_count: i32,
    pub delete_count: i32,
    pub clear_count: i32,
    pub add_count: i32,
    pub remove_count: i32,
    pub set_count: i32,
    pub discard_count: i32,
}
extern "C" {
    pub static ECS_PAIR: ecs_id_t;
}
extern "C" {
    pub static ECS_OVERRIDE: ecs_id_t;
}
extern "C" {
    pub static ECS_TOGGLE: ecs_id_t;
}
extern "C" {
    pub static ECS_AND: ecs_id_t;
}
extern "C" {
    pub static ECS_OR: ecs_id_t;
}
extern "C" {
    pub static ECS_NOT: ecs_id_t;
}
extern "C" {
    pub static FLECS__EEcsComponent: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsIdentifier: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsIterable: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsPoly: ecs_entity_t;
}
extern "C" {
    pub static EcsQuery: ecs_entity_t;
}
extern "C" {
    pub static EcsObserver: ecs_entity_t;
}
extern "C" {
    pub static EcsSystem: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsTickSource: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsPipelineQuery: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsTimer: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsRateFilter: ecs_entity_t;
}
extern "C" {
    pub static EcsFlecs: ecs_entity_t;
}
extern "C" {
    pub static EcsFlecsCore: ecs_entity_t;
}
extern "C" {
    pub static EcsWorld: ecs_entity_t;
}
extern "C" {
    pub static EcsWildcard: ecs_entity_t;
}
extern "C" {
    pub static EcsAny: ecs_entity_t;
}
extern "C" {
    pub static EcsThis: ecs_entity_t;
}
extern "C" {
    pub static EcsVariable: ecs_entity_t;
}
extern "C" {
    pub static EcsTransitive: ecs_entity_t;
}
extern "C" {
    pub static EcsReflexive: ecs_entity_t;
}
extern "C" {
    pub static EcsFinal: ecs_entity_t;
}
extern "C" {
    pub static EcsDontInherit: ecs_entity_t;
}
extern "C" {
    pub static EcsSymmetric: ecs_entity_t;
}
extern "C" {
    pub static EcsExclusive: ecs_entity_t;
}
extern "C" {
    pub static EcsAcyclic: ecs_entity_t;
}
extern "C" {
    pub static EcsWith: ecs_entity_t;
}
extern "C" {
    pub static EcsOneOf: ecs_entity_t;
}
extern "C" {
    pub static EcsTag: ecs_entity_t;
}
extern "C" {
    pub static EcsUnion: ecs_entity_t;
}
extern "C" {
    pub static EcsName: ecs_entity_t;
}
extern "C" {
    pub static EcsSymbol: ecs_entity_t;
}
extern "C" {
    pub static EcsAlias: ecs_entity_t;
}
extern "C" {
    pub static EcsChildOf: ecs_entity_t;
}
extern "C" {
    pub static EcsIsA: ecs_entity_t;
}
extern "C" {
    pub static EcsDependsOn: ecs_entity_t;
}
extern "C" {
    pub static EcsModule: ecs_entity_t;
}
extern "C" {
    pub static EcsPrivate: ecs_entity_t;
}
extern "C" {
    pub static EcsPrefab: ecs_entity_t;
}
extern "C" {
    pub static EcsDisabled: ecs_entity_t;
}
extern "C" {
    pub static EcsOnAdd: ecs_entity_t;
}
extern "C" {
    pub static EcsOnRemove: ecs_entity_t;
}
extern "C" {
    pub static EcsOnSet: ecs_entity_t;
}
extern "C" {
    pub static EcsUnSet: ecs_entity_t;
}
extern "C" {
    pub static EcsMonitor: ecs_entity_t;
}
extern "C" {
    pub static EcsOnDelete: ecs_entity_t;
}
extern "C" {
    pub static EcsOnTableEmpty: ecs_entity_t;
}
extern "C" {
    pub static EcsOnTableFill: ecs_entity_t;
}
extern "C" {
    pub static EcsOnDeleteTarget: ecs_entity_t;
}
extern "C" {
    pub static EcsRemove: ecs_entity_t;
}
extern "C" {
    pub static EcsDelete: ecs_entity_t;
}
extern "C" {
    pub static EcsPanic: ecs_entity_t;
}
extern "C" {
    pub static EcsDefaultChildComponent: ecs_entity_t;
}
extern "C" {
    pub static EcsEmpty: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsPipeline: ecs_entity_t;
}
extern "C" {
    pub static EcsPreFrame: ecs_entity_t;
}
extern "C" {
    pub static EcsOnLoad: ecs_entity_t;
}
extern "C" {
    pub static EcsPostLoad: ecs_entity_t;
}
extern "C" {
    pub static EcsPreUpdate: ecs_entity_t;
}
extern "C" {
    pub static EcsOnUpdate: ecs_entity_t;
}
extern "C" {
    pub static EcsOnValidate: ecs_entity_t;
}
extern "C" {
    pub static EcsPostUpdate: ecs_entity_t;
}
extern "C" {
    pub static EcsPreStore: ecs_entity_t;
}
extern "C" {
    pub static EcsOnStore: ecs_entity_t;
}
extern "C" {
    pub static EcsPostFrame: ecs_entity_t;
}
extern "C" {
    pub static EcsPhase: ecs_entity_t;
}
extern "C" {
    pub fn ecs_init() -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_mini() -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_init_w_args(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_fini(world: *mut ecs_world_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_is_fini(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_atfini(
        world: *mut ecs_world_t,
        action: ecs_fini_action_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ecs_run_post_frame(
        world: *mut ecs_world_t,
        action: ecs_fini_action_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ecs_quit(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_should_quit(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_set_hooks_id(
        world: *mut ecs_world_t,
        id: ecs_entity_t,
        hooks: *const ecs_type_hooks_t,
    );
}
extern "C" {
    pub fn ecs_get_hooks_id(world: *mut ecs_world_t, id: ecs_entity_t) -> *const ecs_type_hooks_t;
}
extern "C" {
    pub fn ecs_set_context(world: *mut ecs_world_t, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ecs_get_context(world: *const ecs_world_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_world_info(world: *const ecs_world_t) -> *const ecs_world_info_t;
}
extern "C" {
    pub fn ecs_dim(world: *mut ecs_world_t, entity_count: i32);
}
extern "C" {
    pub fn ecs_set_entity_range(
        world: *mut ecs_world_t,
        id_start: ecs_entity_t,
        id_end: ecs_entity_t,
    );
}
extern "C" {
    pub fn ecs_set_entity_generation(world: *mut ecs_world_t, entity_with_generation: ecs_entity_t);
}
extern "C" {
    pub fn ecs_enable_range_check(world: *mut ecs_world_t, enable: bool) -> bool;
}
extern "C" {
    pub fn ecs_measure_frame_time(world: *mut ecs_world_t, enable: bool);
}
extern "C" {
    pub fn ecs_measure_system_time(world: *mut ecs_world_t, enable: bool);
}
extern "C" {
    pub fn ecs_set_target_fps(world: *mut ecs_world_t, fps: f32);
}
extern "C" {
    pub fn ecs_run_aperiodic(world: *mut ecs_world_t, flags: ecs_flags32_t);
}
extern "C" {
    pub fn ecs_delete_empty_tables(
        world: *mut ecs_world_t,
        id: ecs_id_t,
        clear_generation: u16,
        delete_generation: u16,
        min_id_count: i32,
        time_budget_seconds: f64,
    ) -> i32;
}
extern "C" {
    pub fn ecs_new_id(world: *mut ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_new_low_id(world: *mut ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_new_w_id(world: *mut ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_entity_init(world: *mut ecs_world_t, desc: *const ecs_entity_desc_t)
        -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_bulk_init(
        world: *mut ecs_world_t,
        desc: *const ecs_bulk_desc_t,
    ) -> *const ecs_entity_t;
}
extern "C" {
    pub fn ecs_component_init(
        world: *mut ecs_world_t,
        desc: *const ecs_component_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_bulk_new_w_id(
        world: *mut ecs_world_t,
        id: ecs_id_t,
        count: i32,
    ) -> *const ecs_entity_t;
}
extern "C" {
    pub fn ecs_clone(
        world: *mut ecs_world_t,
        dst: ecs_entity_t,
        src: ecs_entity_t,
        copy_value: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_add_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_remove_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_enable_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t, enable: bool);
}
extern "C" {
    pub fn ecs_is_enabled_id(world: *const ecs_world_t, entity: ecs_entity_t, id: ecs_id_t)
        -> bool;
}
extern "C" {
    pub fn ecs_make_pair(first: ecs_entity_t, second: ecs_entity_t) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_clear(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_delete(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_delete_with(world: *mut ecs_world_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_remove_all(world: *mut ecs_world_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_get_id(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_ref_init_id(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> ecs_ref_t;
}
extern "C" {
    pub fn ecs_ref_get_id(
        world: *const ecs_world_t,
        ref_: *mut ecs_ref_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_mut_id(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_write_begin(world: *mut ecs_world_t, entity: ecs_entity_t) -> *mut ecs_record_t;
}
extern "C" {
    pub fn ecs_write_end(record: *mut ecs_record_t);
}
extern "C" {
    pub fn ecs_read_begin(world: *mut ecs_world_t, entity: ecs_entity_t) -> *const ecs_record_t;
}
extern "C" {
    pub fn ecs_read_end(record: *const ecs_record_t);
}
extern "C" {
    pub fn ecs_record_get_id(
        world: *mut ecs_world_t,
        record: *const ecs_record_t,
        id: ecs_id_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_record_get_mut_id(
        world: *mut ecs_world_t,
        record: *mut ecs_record_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_emplace_id(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_modified_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_set_id(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
        size: usize,
        ptr: *const ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_is_valid(world: *const ecs_world_t, e: ecs_entity_t) -> bool;
}
extern "C" {
    pub fn ecs_is_alive(world: *const ecs_world_t, e: ecs_entity_t) -> bool;
}
extern "C" {
    pub fn ecs_strip_generation(e: ecs_entity_t) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_get_alive(world: *const ecs_world_t, e: ecs_entity_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_ensure(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_ensure_id(world: *mut ecs_world_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_exists(world: *const ecs_world_t, entity: ecs_entity_t) -> bool;
}
extern "C" {
    pub fn ecs_get_type(world: *const ecs_world_t, entity: ecs_entity_t) -> *const ecs_type_t;
}
extern "C" {
    pub fn ecs_get_table(world: *const ecs_world_t, entity: ecs_entity_t) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_get_storage_table(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_get_type_info(world: *const ecs_world_t, id: ecs_id_t) -> *const ecs_type_info_t;
}
extern "C" {
    pub fn ecs_get_typeid(world: *const ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_id_is_tag(world: *const ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_id_in_use(world: *mut ecs_world_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_get_name(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_get_symbol(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_set_name(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_symbol(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        symbol: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_alias(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        alias: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_id_flag_str(id_flags: ecs_id_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_id_str(world: *const ecs_world_t, id: ecs_id_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_id_str_buf(world: *const ecs_world_t, id: ecs_id_t, buf: *mut ecs_strbuf_t);
}
extern "C" {
    pub fn ecs_type_str(
        world: *const ecs_world_t,
        type_: *const ecs_type_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_table_str(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_has_id(world: *const ecs_world_t, entity: ecs_entity_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_get_target(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        rel: ecs_entity_t,
        index: i32,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_target_for_id(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        rel: ecs_entity_t,
        id: ecs_id_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_enable(world: *mut ecs_world_t, entity: ecs_entity_t, enabled: bool);
}
extern "C" {
    pub fn ecs_count_id(world: *const ecs_world_t, entity: ecs_id_t) -> i32;
}
extern "C" {
    pub fn ecs_lookup(
        world: *const ecs_world_t,
        name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_lookup_child(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_lookup_path_w_sep(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        path: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        recursive: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_lookup_symbol(
        world: *const ecs_world_t,
        symbol: *const ::std::os::raw::c_char,
        lookup_as_path: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_path_w_sep(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        child: ecs_entity_t,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_get_path_w_sep_buf(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        child: ecs_entity_t,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        buf: *mut ecs_strbuf_t,
    );
}
extern "C" {
    pub fn ecs_new_from_path_w_sep(
        world: *mut ecs_world_t,
        parent: ecs_entity_t,
        path: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_add_path_w_sep(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        parent: ecs_entity_t,
        path: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_scope(world: *mut ecs_world_t, scope: ecs_entity_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_scope(world: *const ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_with(world: *mut ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_with(world: *const ecs_world_t) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_set_name_prefix(
        world: *mut ecs_world_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_set_lookup_path(
        world: *mut ecs_world_t,
        lookup_path: *const ecs_entity_t,
    ) -> *mut ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_lookup_path(world: *const ecs_world_t) -> *mut ecs_entity_t;
}
extern "C" {
    pub fn ecs_term_iter(world: *const ecs_world_t, term: *mut ecs_term_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_term_chain_iter(it: *const ecs_iter_t, term: *mut ecs_term_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_term_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_term_id_is_set(id: *const ecs_term_id_t) -> bool;
}
extern "C" {
    pub fn ecs_term_is_initialized(term: *const ecs_term_t) -> bool;
}
extern "C" {
    pub fn ecs_term_match_this(term: *const ecs_term_t) -> bool;
}
extern "C" {
    pub fn ecs_term_match_0(term: *const ecs_term_t) -> bool;
}
extern "C" {
    pub fn ecs_term_finalize(
        world: *const ecs_world_t,
        term: *mut ecs_term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_term_copy(src: *const ecs_term_t) -> ecs_term_t;
}
extern "C" {
    pub fn ecs_term_move(src: *mut ecs_term_t) -> ecs_term_t;
}
extern "C" {
    pub fn ecs_term_fini(term: *mut ecs_term_t);
}
extern "C" {
    pub fn ecs_id_match(id: ecs_id_t, pattern: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_pair(id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_wildcard(id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_valid(world: *const ecs_world_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_get_flags(world: *const ecs_world_t, id: ecs_id_t) -> ecs_flags32_t;
}
extern "C" {
    pub fn ecs_filter_init(
        world: *const ecs_world_t,
        desc: *const ecs_filter_desc_t,
    ) -> *mut ecs_filter_t;
}
extern "C" {
    pub fn ecs_filter_fini(filter: *mut ecs_filter_t);
}
extern "C" {
    pub fn ecs_filter_finalize(
        world: *const ecs_world_t,
        filter: *mut ecs_filter_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_filter_find_this_var(filter: *const ecs_filter_t) -> i32;
}
extern "C" {
    pub fn ecs_term_str(
        world: *const ecs_world_t,
        term: *const ecs_term_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_filter_str(
        world: *const ecs_world_t,
        filter: *const ecs_filter_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_filter_iter(world: *const ecs_world_t, filter: *const ecs_filter_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_filter_chain_iter(it: *const ecs_iter_t, filter: *const ecs_filter_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_filter_pivot_term(world: *const ecs_world_t, filter: *const ecs_filter_t) -> i32;
}
extern "C" {
    pub fn ecs_filter_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_filter_next_instanced(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_filter_move(dst: *mut ecs_filter_t, src: *mut ecs_filter_t);
}
extern "C" {
    pub fn ecs_filter_copy(dst: *mut ecs_filter_t, src: *const ecs_filter_t);
}
extern "C" {
    pub fn ecs_query_init(
        world: *mut ecs_world_t,
        desc: *const ecs_query_desc_t,
    ) -> *mut ecs_query_t;
}
extern "C" {
    pub fn ecs_query_fini(query: *mut ecs_query_t);
}
extern "C" {
    pub fn ecs_query_get_filter(query: *mut ecs_query_t) -> *const ecs_filter_t;
}
extern "C" {
    pub fn ecs_query_iter(world: *const ecs_world_t, query: *mut ecs_query_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_query_next(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_next_instanced(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_changed(query: *mut ecs_query_t, it: *const ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_skip(it: *mut ecs_iter_t);
}
extern "C" {
    pub fn ecs_query_orphaned(query: *mut ecs_query_t) -> bool;
}
extern "C" {
    pub fn ecs_query_str(query: *const ecs_query_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_query_table_count(query: *const ecs_query_t) -> i32;
}
extern "C" {
    pub fn ecs_query_empty_table_count(query: *const ecs_query_t) -> i32;
}
extern "C" {
    pub fn ecs_query_entity_count(query: *const ecs_query_t) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_event_desc_t {
    pub event: ecs_entity_t,
    pub ids: *const ecs_type_t,
    pub table: *mut ecs_table_t,
    pub other_table: *mut ecs_table_t,
    pub offset: i32,
    pub count: i32,
    pub param: *const ::std::os::raw::c_void,
    pub observable: *mut ecs_poly_t,
    pub table_event: bool,
    pub relationship: ecs_entity_t,
}
extern "C" {
    pub fn ecs_emit(world: *mut ecs_world_t, desc: *mut ecs_event_desc_t);
}
extern "C" {
    pub fn ecs_observer_init(
        world: *mut ecs_world_t,
        desc: *const ecs_observer_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_observer_default_run_action(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_get_observer_ctx(
        world: *const ecs_world_t,
        observer: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_observer_binding_ctx(
        world: *const ecs_world_t,
        observer: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_iter_poly(
        world: *const ecs_world_t,
        poly: *const ecs_poly_t,
        iter: *mut ecs_iter_t,
        filter: *mut ecs_term_t,
    );
}
extern "C" {
    pub fn ecs_iter_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_iter_fini(it: *mut ecs_iter_t);
}
extern "C" {
    pub fn ecs_iter_count(it: *mut ecs_iter_t) -> i32;
}
extern "C" {
    pub fn ecs_iter_is_true(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_iter_set_var(it: *mut ecs_iter_t, var_id: i32, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_iter_set_var_as_table(it: *mut ecs_iter_t, var_id: i32, table: *const ecs_table_t);
}
extern "C" {
    pub fn ecs_iter_set_var_as_range(
        it: *mut ecs_iter_t,
        var_id: i32,
        range: *const ecs_table_range_t,
    );
}
extern "C" {
    pub fn ecs_iter_get_var(it: *mut ecs_iter_t, var_id: i32) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_iter_get_var_as_table(it: *mut ecs_iter_t, var_id: i32) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_iter_get_var_as_range(it: *mut ecs_iter_t, var_id: i32) -> ecs_table_range_t;
}
extern "C" {
    pub fn ecs_iter_var_is_constrained(it: *mut ecs_iter_t, var_id: i32) -> bool;
}
extern "C" {
    pub fn ecs_page_iter(it: *const ecs_iter_t, offset: i32, limit: i32) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_page_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_worker_iter(it: *const ecs_iter_t, index: i32, count: i32) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_worker_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_field_w_size(
        it: *const ecs_iter_t,
        size: usize,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_field_is_readonly(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_field_is_writeonly(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_field_is_set(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_field_id(it: *const ecs_iter_t, index: i32) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_field_src(it: *const ecs_iter_t, index: i32) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_field_size(it: *const ecs_iter_t, index: i32) -> usize;
}
extern "C" {
    pub fn ecs_field_is_self(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_iter_str(it: *const ecs_iter_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_iter_find_column(it: *const ecs_iter_t, id: ecs_id_t) -> i32;
}
extern "C" {
    pub fn ecs_iter_column_w_size(
        it: *const ecs_iter_t,
        size: usize,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_iter_column_size(it: *const ecs_iter_t, index: i32) -> usize;
}
extern "C" {
    pub fn ecs_frame_begin(world: *mut ecs_world_t, delta_time: f32) -> f32;
}
extern "C" {
    pub fn ecs_frame_end(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_readonly_begin(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_readonly_end(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_merge(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_defer_begin(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_is_deferred(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_defer_end(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_defer_suspend(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_defer_resume(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_set_automerge(world: *mut ecs_world_t, automerge: bool);
}
extern "C" {
    pub fn ecs_set_stage_count(world: *mut ecs_world_t, stages: i32);
}
extern "C" {
    pub fn ecs_get_stage_count(world: *const ecs_world_t) -> i32;
}
extern "C" {
    pub fn ecs_get_stage_id(world: *const ecs_world_t) -> i32;
}
extern "C" {
    pub fn ecs_get_stage(world: *const ecs_world_t, stage_id: i32) -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_get_world(world: *const ecs_poly_t) -> *const ecs_world_t;
}
extern "C" {
    pub fn ecs_stage_is_readonly(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_async_stage_new(world: *mut ecs_world_t) -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_async_stage_free(stage: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_stage_is_async(stage: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_search(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        id: ecs_id_t,
        id_out: *mut ecs_id_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_search_offset(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        offset: i32,
        id: ecs_id_t,
        id_out: *mut ecs_id_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_search_relation(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        offset: i32,
        id: ecs_id_t,
        rel: ecs_entity_t,
        flags: ecs_flags32_t,
        subject_out: *mut ecs_entity_t,
        id_out: *mut ecs_id_t,
        tr_out: *mut *mut ecs_table_record_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_table_get_type(table: *const ecs_table_t) -> *const ecs_type_t;
}
extern "C" {
    pub fn ecs_table_get_column(table: *mut ecs_table_t, index: i32)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_table_get_storage_table(table: *const ecs_table_t) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_table_type_to_storage_index(table: *const ecs_table_t, index: i32) -> i32;
}
extern "C" {
    pub fn ecs_table_storage_to_type_index(table: *const ecs_table_t, index: i32) -> i32;
}
extern "C" {
    pub fn ecs_table_count(table: *const ecs_table_t) -> i32;
}
extern "C" {
    pub fn ecs_table_add_id(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        id: ecs_id_t,
    ) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_table_remove_id(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        id: ecs_id_t,
    ) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_table_lock(world: *mut ecs_world_t, table: *mut ecs_table_t);
}
extern "C" {
    pub fn ecs_table_unlock(world: *mut ecs_world_t, table: *mut ecs_table_t);
}
extern "C" {
    pub fn ecs_table_has_module(table: *mut ecs_table_t) -> bool;
}
extern "C" {
    pub fn ecs_table_swap_rows(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        row_1: i32,
        row_2: i32,
    );
}
extern "C" {
    pub fn ecs_commit(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        record: *mut ecs_record_t,
        table: *mut ecs_table_t,
        added: *const ecs_type_t,
        removed: *const ecs_type_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_record_find(world: *const ecs_world_t, entity: ecs_entity_t) -> *mut ecs_record_t;
}
extern "C" {
    pub fn ecs_record_get_column(
        r: *const ecs_record_t,
        column: i32,
        c_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _ecs_deprecated(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _ecs_log_push(level: i32);
}
extern "C" {
    pub fn _ecs_log_pop(level: i32);
}
extern "C" {
    pub fn ecs_should_log(level: i32) -> bool;
}
extern "C" {
    pub fn ecs_strerror(error_code: i32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecs_log(
        level: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn _ecs_logv(
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn _ecs_abort(
        error_code: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn _ecs_assert(
        condition: bool,
        error_code: i32,
        condition_str: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn _ecs_parser_error(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        column: i64,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn _ecs_parser_errorv(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        column: i64,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn ecs_log_set_level(level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_log_enable_colors(enabled: bool) -> bool;
}
extern "C" {
    pub fn ecs_log_enable_timestamp(enabled: bool) -> bool;
}
extern "C" {
    pub fn ecs_log_enable_timedelta(enabled: bool) -> bool;
}
extern "C" {
    pub fn ecs_log_last_error() -> ::std::os::raw::c_int;
}
pub type ecs_app_init_action_t =
    ::std::option::Option<unsafe extern "C" fn(world: *mut ecs_world_t) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_app_desc_t {
    pub target_fps: f32,
    pub delta_time: f32,
    pub threads: i32,
    pub enable_rest: bool,
    pub enable_monitor: bool,
    pub init: ecs_app_init_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
}
pub type ecs_app_run_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        desc: *mut ecs_app_desc_t,
    ) -> ::std::os::raw::c_int,
>;
pub type ecs_app_frame_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        desc: *const ecs_app_desc_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ecs_app_run(world: *mut ecs_world_t, desc: *mut ecs_app_desc_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_app_run_frame(
        world: *mut ecs_world_t,
        desc: *const ecs_app_desc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_app_set_run_action(callback: ecs_app_run_action_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_app_set_frame_action(callback: ecs_app_frame_action_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static FLECS__EEcsRest: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsRest {
    pub port: u16,
    pub ipaddr: *mut ::std::os::raw::c_char,
    pub impl_: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn FlecsRestImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsTimer {
    pub timeout: f32,
    pub time: f32,
    pub fired_count: i32,
    pub active: bool,
    pub single_shot: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsRateFilter {
    pub src: ecs_entity_t,
    pub rate: i32,
    pub tick_count: i32,
    pub time_elapsed: f32,
}
extern "C" {
    pub fn ecs_set_timeout(
        world: *mut ecs_world_t,
        tick_source: ecs_entity_t,
        timeout: f32,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_timeout(world: *const ecs_world_t, tick_source: ecs_entity_t) -> f32;
}
extern "C" {
    pub fn ecs_set_interval(
        world: *mut ecs_world_t,
        tick_source: ecs_entity_t,
        interval: f32,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_interval(world: *const ecs_world_t, tick_source: ecs_entity_t) -> f32;
}
extern "C" {
    pub fn ecs_start_timer(world: *mut ecs_world_t, tick_source: ecs_entity_t);
}
extern "C" {
    pub fn ecs_stop_timer(world: *mut ecs_world_t, tick_source: ecs_entity_t);
}
extern "C" {
    pub fn ecs_set_rate(
        world: *mut ecs_world_t,
        tick_source: ecs_entity_t,
        rate: i32,
        source: ecs_entity_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_tick_source(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        tick_source: ecs_entity_t,
    );
}
extern "C" {
    pub fn FlecsTimerImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_pipeline_desc_t {
    pub entity: ecs_entity_t,
    pub query: ecs_query_desc_t,
}
extern "C" {
    pub fn ecs_pipeline_init(
        world: *mut ecs_world_t,
        desc: *const ecs_pipeline_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_pipeline(world: *mut ecs_world_t, pipeline: ecs_entity_t);
}
extern "C" {
    pub fn ecs_get_pipeline(world: *const ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_progress(world: *mut ecs_world_t, delta_time: f32) -> bool;
}
extern "C" {
    pub fn ecs_set_time_scale(world: *mut ecs_world_t, scale: f32);
}
extern "C" {
    pub fn ecs_reset_clock(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_run_pipeline(world: *mut ecs_world_t, pipeline: ecs_entity_t, delta_time: f32);
}
extern "C" {
    pub fn ecs_set_threads(world: *mut ecs_world_t, threads: i32);
}
extern "C" {
    pub fn FlecsPipelineImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsTickSource {
    pub tick: bool,
    pub time_elapsed: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_system_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub query: ecs_query_desc_t,
    pub run: ecs_run_action_t,
    pub callback: ecs_iter_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
    pub interval: f32,
    pub rate: i32,
    pub tick_source: ecs_entity_t,
    pub multi_threaded: bool,
    pub no_staging: bool,
}
extern "C" {
    pub fn ecs_system_init(world: *mut ecs_world_t, desc: *const ecs_system_desc_t)
        -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        delta_time: f32,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run_worker(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        stage_current: i32,
        stage_count: i32,
        delta_time: f32,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run_w_filter(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        delta_time: f32,
        offset: i32,
        limit: i32,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_system_get_query(
        world: *const ecs_world_t,
        system: ecs_entity_t,
    ) -> *mut ecs_query_t;
}
extern "C" {
    pub fn ecs_get_system_ctx(
        world: *const ecs_world_t,
        system: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_system_binding_ctx(
        world: *const ecs_world_t,
        system: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn FlecsSystemImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_gauge_t {
    pub avg: [f32; 60usize],
    pub min: [f32; 60usize],
    pub max: [f32; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_counter_t {
    pub rate: ecs_gauge_t,
    pub value: [f32; 60usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ecs_metric_t {
    pub gauge: ecs_gauge_t,
    pub counter: ecs_counter_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t {
    pub first_: i32,
    pub entity_count: ecs_metric_t,
    pub entity_not_alive_count: ecs_metric_t,
    pub id_count: ecs_metric_t,
    pub tag_id_count: ecs_metric_t,
    pub component_id_count: ecs_metric_t,
    pub pair_id_count: ecs_metric_t,
    pub wildcard_id_count: ecs_metric_t,
    pub component_count: ecs_metric_t,
    pub id_create_count: ecs_metric_t,
    pub id_delete_count: ecs_metric_t,
    pub table_count: ecs_metric_t,
    pub empty_table_count: ecs_metric_t,
    pub tag_table_count: ecs_metric_t,
    pub trivial_table_count: ecs_metric_t,
    pub table_record_count: ecs_metric_t,
    pub table_storage_count: ecs_metric_t,
    pub table_create_count: ecs_metric_t,
    pub table_delete_count: ecs_metric_t,
    pub query_count: ecs_metric_t,
    pub observer_count: ecs_metric_t,
    pub system_count: ecs_metric_t,
    pub new_count: ecs_metric_t,
    pub bulk_new_count: ecs_metric_t,
    pub delete_count: ecs_metric_t,
    pub clear_count: ecs_metric_t,
    pub add_count: ecs_metric_t,
    pub remove_count: ecs_metric_t,
    pub set_count: ecs_metric_t,
    pub discard_count: ecs_metric_t,
    pub world_time_total_raw: ecs_metric_t,
    pub world_time_total: ecs_metric_t,
    pub frame_time_total: ecs_metric_t,
    pub system_time_total: ecs_metric_t,
    pub merge_time_total: ecs_metric_t,
    pub fps: ecs_metric_t,
    pub delta_time: ecs_metric_t,
    pub frame_count_total: ecs_metric_t,
    pub merge_count_total: ecs_metric_t,
    pub pipeline_build_count_total: ecs_metric_t,
    pub systems_ran_frame: ecs_metric_t,
    pub alloc_count: ecs_metric_t,
    pub realloc_count: ecs_metric_t,
    pub free_count: ecs_metric_t,
    pub outstanding_alloc_count: ecs_metric_t,
    pub last_: i32,
    pub t: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_query_stats_t {
    pub first_: i32,
    pub matched_table_count: ecs_metric_t,
    pub matched_empty_table_count: ecs_metric_t,
    pub matched_entity_count: ecs_metric_t,
    pub last_: i32,
    pub t: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_system_stats_t {
    pub first_: i32,
    pub time_spent: ecs_metric_t,
    pub invoke_count: ecs_metric_t,
    pub active: ecs_metric_t,
    pub enabled: ecs_metric_t,
    pub last_: i32,
    pub task: bool,
    pub query: ecs_query_stats_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_pipeline_stats_t {
    pub systems: *mut ecs_vector_t,
    pub system_stats: ecs_map_t,
    pub t: i32,
    pub system_count: i32,
    pub active_system_count: i32,
    pub rebuild_count: i32,
}
extern "C" {
    pub fn ecs_world_stats_get(world: *const ecs_world_t, stats: *mut ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_reduce(dst: *mut ecs_world_stats_t, src: *const ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_reduce_last(
        stats: *mut ecs_world_stats_t,
        old: *const ecs_world_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_world_stats_repeat_last(stats: *mut ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_copy_last(dst: *mut ecs_world_stats_t, src: *const ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_log(world: *const ecs_world_t, stats: *const ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_query_stats_get(
        world: *const ecs_world_t,
        query: *const ecs_query_t,
        stats: *mut ecs_query_stats_t,
    );
}
extern "C" {
    pub fn ecs_query_stats_reduce(dst: *mut ecs_query_stats_t, src: *const ecs_query_stats_t);
}
extern "C" {
    pub fn ecs_query_stats_reduce_last(
        stats: *mut ecs_query_stats_t,
        old: *const ecs_query_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_query_stats_repeat_last(stats: *mut ecs_query_stats_t);
}
extern "C" {
    pub fn ecs_query_stats_copy_last(dst: *mut ecs_query_stats_t, src: *const ecs_query_stats_t);
}
extern "C" {
    pub fn ecs_system_stats_get(
        world: *const ecs_world_t,
        system: ecs_entity_t,
        stats: *mut ecs_system_stats_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_system_stats_reduce(dst: *mut ecs_system_stats_t, src: *const ecs_system_stats_t);
}
extern "C" {
    pub fn ecs_system_stats_reduce_last(
        stats: *mut ecs_system_stats_t,
        old: *const ecs_system_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_system_stats_repeat_last(stats: *mut ecs_system_stats_t);
}
extern "C" {
    pub fn ecs_system_stats_copy_last(dst: *mut ecs_system_stats_t, src: *const ecs_system_stats_t);
}
extern "C" {
    pub fn ecs_pipeline_stats_get(
        world: *mut ecs_world_t,
        pipeline: ecs_entity_t,
        stats: *mut ecs_pipeline_stats_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_pipeline_stats_fini(stats: *mut ecs_pipeline_stats_t);
}
extern "C" {
    pub fn ecs_pipeline_stats_reduce(
        dst: *mut ecs_pipeline_stats_t,
        src: *const ecs_pipeline_stats_t,
    );
}
extern "C" {
    pub fn ecs_pipeline_stats_reduce_last(
        stats: *mut ecs_pipeline_stats_t,
        old: *const ecs_pipeline_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_pipeline_stats_repeat_last(stats: *mut ecs_pipeline_stats_t);
}
extern "C" {
    pub fn ecs_pipeline_stats_copy_last(
        dst: *mut ecs_pipeline_stats_t,
        src: *const ecs_pipeline_stats_t,
    );
}
extern "C" {
    pub fn ecs_metric_reduce(
        dst: *mut ecs_metric_t,
        src: *const ecs_metric_t,
        t_dst: i32,
        t_src: i32,
    );
}
extern "C" {
    pub fn ecs_metric_reduce_last(m: *mut ecs_metric_t, t: i32, count: i32);
}
extern "C" {
    pub fn ecs_metric_copy(m: *mut ecs_metric_t, dst: i32, src: i32);
}
extern "C" {
    pub static mut FLECS__EFlecsMonitor: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsWorldStats: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPipelineStats: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1s: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPeriod1s: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1m: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPeriod1m: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1h: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPeriod1h: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1d: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPeriod1d: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1w: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPeriod1w: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsStatsHeader {
    pub elapsed: f32,
    pub reduce_count: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EcsWorldStats {
    pub hdr: EcsStatsHeader,
    pub stats: ecs_world_stats_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsPipelineStats {
    pub hdr: EcsStatsHeader,
    pub stats: ecs_pipeline_stats_t,
}
extern "C" {
    pub fn FlecsMonitorImport(world: *mut ecs_world_t);
}
extern "C" {
    pub fn FlecsCoreDocImport(world: *mut ecs_world_t);
}
extern "C" {
    pub static FLECS__EEcsDocDescription: ecs_entity_t;
}
extern "C" {
    pub static EcsDocBrief: ecs_entity_t;
}
extern "C" {
    pub static EcsDocDetail: ecs_entity_t;
}
extern "C" {
    pub static EcsDocLink: ecs_entity_t;
}
extern "C" {
    pub static EcsDocColor: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsDocDescription {
    pub value: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_doc_set_name(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_brief(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        description: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_detail(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        description: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_link(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        link: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_color(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_get_name(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_brief(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_detail(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_link(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_color(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FlecsDocImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_parse_json_desc_t {
    pub name: *const ::std::os::raw::c_char,
    pub expr: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_parse_json(
        world: *const ecs_world_t,
        ptr: *const ::std::os::raw::c_char,
        type_: ecs_entity_t,
        data_out: *mut ::std::os::raw::c_void,
        desc: *const ecs_parse_json_desc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_array_to_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        count: i32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_array_to_json_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        count: i32,
        buf_out: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_ptr_to_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_json_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        buf_out: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_type_info_to_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_type_info_to_json_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        buf_out: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_entity_to_json_desc_t {
    pub serialize_path: bool,
    pub serialize_meta_ids: bool,
    pub serialize_label: bool,
    pub serialize_brief: bool,
    pub serialize_link: bool,
    pub serialize_color: bool,
    pub serialize_id_labels: bool,
    pub serialize_base: bool,
    pub serialize_private: bool,
    pub serialize_hidden: bool,
    pub serialize_values: bool,
    pub serialize_type_info: bool,
}
extern "C" {
    pub fn ecs_entity_to_json(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        desc: *const ecs_entity_to_json_desc_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_entity_to_json_buf(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        buf_out: *mut ecs_strbuf_t,
        desc: *const ecs_entity_to_json_desc_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_iter_to_json_desc_t {
    pub serialize_term_ids: bool,
    pub serialize_ids: bool,
    pub serialize_sources: bool,
    pub serialize_variables: bool,
    pub serialize_is_set: bool,
    pub serialize_values: bool,
    pub serialize_entities: bool,
    pub serialize_entity_labels: bool,
    pub serialize_entity_ids: bool,
    pub serialize_variable_labels: bool,
    pub serialize_variable_ids: bool,
    pub serialize_colors: bool,
    pub measure_eval_duration: bool,
    pub serialize_type_info: bool,
}
extern "C" {
    pub fn ecs_iter_to_json(
        world: *const ecs_world_t,
        iter: *mut ecs_iter_t,
        desc: *const ecs_iter_to_json_desc_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_iter_to_json_buf(
        world: *const ecs_world_t,
        iter: *mut ecs_iter_t,
        buf_out: *mut ecs_strbuf_t,
        desc: *const ecs_iter_to_json_desc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut EcsUnitPrefixes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsUnitPrefixes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsYocto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsYocto: ecs_entity_t;
}
extern "C" {
    pub static mut EcsZepto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsZepto: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAtto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsAtto: ecs_entity_t;
}
extern "C" {
    pub static mut EcsFemto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsFemto: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPico: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPico: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNano: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsNano: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMicro: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMicro: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilli: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMilli: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCenti: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsCenti: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDeci: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDeci: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDeca: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDeca: ecs_entity_t;
}
extern "C" {
    pub static mut EcsHecto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsHecto: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKilo: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKilo: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMega: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMega: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGiga: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGiga: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTera: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsTera: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeta: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPeta: ecs_entity_t;
}
extern "C" {
    pub static mut EcsExa: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsExa: ecs_entity_t;
}
extern "C" {
    pub static mut EcsZetta: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsZetta: ecs_entity_t;
}
extern "C" {
    pub static mut EcsYotta: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsYotta: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKibi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKibi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMebi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGibi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGibi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsTebi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPebi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsExbi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsExbi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsZebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsZebi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsYobi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsYobi: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDuration: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDuration: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPicoSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPicoSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNanoSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsNanoSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMicroSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMicroSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilliSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMilliSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut EcsSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMinutes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMinutes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsHours: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsHours: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDays: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDays: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTime: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsTime: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDate: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDate: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMass: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMass: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGrams: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGrams: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloGrams: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloGrams: ecs_entity_t;
}
extern "C" {
    pub static mut EcsElectricCurrent: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsElectricCurrent: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAmpere: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsAmpere: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAmount: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsAmount: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMole: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMole: ecs_entity_t;
}
extern "C" {
    pub static mut EcsLuminousIntensity: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsLuminousIntensity: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCandela: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsCandela: ecs_entity_t;
}
extern "C" {
    pub static mut EcsForce: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsForce: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNewton: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsNewton: ecs_entity_t;
}
extern "C" {
    pub static mut EcsLength: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsLength: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPicoMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPicoMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNanoMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsNanoMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMicroMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMicroMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilliMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMilliMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCentiMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsCentiMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloMeters: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMiles: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMiles: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPressure: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPressure: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPascal: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPascal: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBar: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsBar: ecs_entity_t;
}
extern "C" {
    pub static mut EcsSpeed: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsSpeed: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMetersPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMetersPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloMetersPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloMetersPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloMetersPerHour: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloMetersPerHour: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilesPerHour: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMilesPerHour: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTemperature: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsTemperature: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKelvin: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKelvin: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCelsius: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsCelsius: ecs_entity_t;
}
extern "C" {
    pub static mut EcsFahrenheit: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsFahrenheit: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAcceleration: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsAcceleration: ecs_entity_t;
}
extern "C" {
    pub static mut EcsData: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsData: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsBits: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloBits: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMegaBits: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGigaBits: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMegaBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGigaBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKibiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKibiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMebiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMebiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGibiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGibiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDataRate: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDataRate: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMegaBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGigaBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsKiloBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsMegaBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsGigaBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPercentage: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsPercentage: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAngle: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsAngle: ecs_entity_t;
}
extern "C" {
    pub static mut EcsRadians: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsRadians: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDegrees: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDegrees: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBel: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsBel: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDeciBel: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS__EEcsDeciBel: ecs_entity_t;
}
extern "C" {
    pub fn FlecsUnitsImport(world: *mut ecs_world_t);
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type ecs_bool_t = bool;
pub type ecs_char_t = ::std::os::raw::c_char;
pub type ecs_byte_t = ::std::os::raw::c_uchar;
pub type ecs_u8_t = u8;
pub type ecs_u16_t = u16;
pub type ecs_u32_t = u32;
pub type ecs_u64_t = u64;
pub type ecs_uptr_t = usize;
pub type ecs_i8_t = i8;
pub type ecs_i16_t = i16;
pub type ecs_i32_t = i32;
pub type ecs_i64_t = i64;
pub type ecs_iptr_t = isize;
pub type ecs_f32_t = f32;
pub type ecs_f64_t = f64;
pub type ecs_string_t = *mut ::std::os::raw::c_char;
extern "C" {
    pub static FLECS__EEcsMetaType: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsMetaTypeSerialized: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsPrimitive: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsEnum: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsBitmask: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsMember: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsStruct: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsArray: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsVector: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsUnit: ecs_entity_t;
}
extern "C" {
    pub static FLECS__EEcsUnitPrefix: ecs_entity_t;
}
extern "C" {
    pub static EcsConstant: ecs_entity_t;
}
extern "C" {
    pub static EcsQuantity: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_bool_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_char_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_byte_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_u8_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_u16_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_u32_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_u64_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_uptr_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_i8_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_i16_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_i32_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_i64_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_iptr_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_f32_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_f64_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_string_t: ecs_entity_t;
}
extern "C" {
    pub static FLECS__Eecs_entity_t: ecs_entity_t;
}
pub const ecs_type_kind_t_EcsPrimitiveType: ecs_type_kind_t = 0;
pub const ecs_type_kind_t_EcsBitmaskType: ecs_type_kind_t = 1;
pub const ecs_type_kind_t_EcsEnumType: ecs_type_kind_t = 2;
pub const ecs_type_kind_t_EcsStructType: ecs_type_kind_t = 3;
pub const ecs_type_kind_t_EcsArrayType: ecs_type_kind_t = 4;
pub const ecs_type_kind_t_EcsVectorType: ecs_type_kind_t = 5;
pub const ecs_type_kind_t_EcsTypeKindLast: ecs_type_kind_t = 5;
pub type ecs_type_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMetaType {
    pub kind: ecs_type_kind_t,
    pub existing: bool,
    pub partial: bool,
    pub size: ecs_size_t,
    pub alignment: ecs_size_t,
}
pub const ecs_primitive_kind_t_EcsBool: ecs_primitive_kind_t = 1;
pub const ecs_primitive_kind_t_EcsChar: ecs_primitive_kind_t = 2;
pub const ecs_primitive_kind_t_EcsByte: ecs_primitive_kind_t = 3;
pub const ecs_primitive_kind_t_EcsU8: ecs_primitive_kind_t = 4;
pub const ecs_primitive_kind_t_EcsU16: ecs_primitive_kind_t = 5;
pub const ecs_primitive_kind_t_EcsU32: ecs_primitive_kind_t = 6;
pub const ecs_primitive_kind_t_EcsU64: ecs_primitive_kind_t = 7;
pub const ecs_primitive_kind_t_EcsI8: ecs_primitive_kind_t = 8;
pub const ecs_primitive_kind_t_EcsI16: ecs_primitive_kind_t = 9;
pub const ecs_primitive_kind_t_EcsI32: ecs_primitive_kind_t = 10;
pub const ecs_primitive_kind_t_EcsI64: ecs_primitive_kind_t = 11;
pub const ecs_primitive_kind_t_EcsF32: ecs_primitive_kind_t = 12;
pub const ecs_primitive_kind_t_EcsF64: ecs_primitive_kind_t = 13;
pub const ecs_primitive_kind_t_EcsUPtr: ecs_primitive_kind_t = 14;
pub const ecs_primitive_kind_t_EcsIPtr: ecs_primitive_kind_t = 15;
pub const ecs_primitive_kind_t_EcsString: ecs_primitive_kind_t = 16;
pub const ecs_primitive_kind_t_EcsEntity: ecs_primitive_kind_t = 17;
pub const ecs_primitive_kind_t_EcsPrimitiveKindLast: ecs_primitive_kind_t = 17;
pub type ecs_primitive_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsPrimitive {
    pub kind: ecs_primitive_kind_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMember {
    pub type_: ecs_entity_t,
    pub count: i32,
    pub unit: ecs_entity_t,
    pub offset: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_member_t {
    pub name: *const ::std::os::raw::c_char,
    pub type_: ecs_entity_t,
    pub count: i32,
    pub offset: i32,
    pub unit: ecs_entity_t,
    pub size: ecs_size_t,
    pub member: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsStruct {
    pub members: *mut ecs_vector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_enum_constant_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: i32,
    pub constant: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsEnum {
    pub constants: *mut ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bitmask_constant_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: ecs_flags32_t,
    pub constant: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsBitmask {
    pub constants: *mut ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsArray {
    pub type_: ecs_entity_t,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsVector {
    pub type_: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_unit_translation_t {
    pub factor: i32,
    pub power: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsUnit {
    pub symbol: *mut ::std::os::raw::c_char,
    pub prefix: ecs_entity_t,
    pub base: ecs_entity_t,
    pub over: ecs_entity_t,
    pub translation: ecs_unit_translation_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsUnitPrefix {
    pub symbol: *mut ::std::os::raw::c_char,
    pub translation: ecs_unit_translation_t,
}
pub const ecs_meta_type_op_kind_t_EcsOpArray: ecs_meta_type_op_kind_t = 0;
pub const ecs_meta_type_op_kind_t_EcsOpVector: ecs_meta_type_op_kind_t = 1;
pub const ecs_meta_type_op_kind_t_EcsOpPush: ecs_meta_type_op_kind_t = 2;
pub const ecs_meta_type_op_kind_t_EcsOpPop: ecs_meta_type_op_kind_t = 3;
pub const ecs_meta_type_op_kind_t_EcsOpScope: ecs_meta_type_op_kind_t = 4;
pub const ecs_meta_type_op_kind_t_EcsOpEnum: ecs_meta_type_op_kind_t = 5;
pub const ecs_meta_type_op_kind_t_EcsOpBitmask: ecs_meta_type_op_kind_t = 6;
pub const ecs_meta_type_op_kind_t_EcsOpPrimitive: ecs_meta_type_op_kind_t = 7;
pub const ecs_meta_type_op_kind_t_EcsOpBool: ecs_meta_type_op_kind_t = 8;
pub const ecs_meta_type_op_kind_t_EcsOpChar: ecs_meta_type_op_kind_t = 9;
pub const ecs_meta_type_op_kind_t_EcsOpByte: ecs_meta_type_op_kind_t = 10;
pub const ecs_meta_type_op_kind_t_EcsOpU8: ecs_meta_type_op_kind_t = 11;
pub const ecs_meta_type_op_kind_t_EcsOpU16: ecs_meta_type_op_kind_t = 12;
pub const ecs_meta_type_op_kind_t_EcsOpU32: ecs_meta_type_op_kind_t = 13;
pub const ecs_meta_type_op_kind_t_EcsOpU64: ecs_meta_type_op_kind_t = 14;
pub const ecs_meta_type_op_kind_t_EcsOpI8: ecs_meta_type_op_kind_t = 15;
pub const ecs_meta_type_op_kind_t_EcsOpI16: ecs_meta_type_op_kind_t = 16;
pub const ecs_meta_type_op_kind_t_EcsOpI32: ecs_meta_type_op_kind_t = 17;
pub const ecs_meta_type_op_kind_t_EcsOpI64: ecs_meta_type_op_kind_t = 18;
pub const ecs_meta_type_op_kind_t_EcsOpF32: ecs_meta_type_op_kind_t = 19;
pub const ecs_meta_type_op_kind_t_EcsOpF64: ecs_meta_type_op_kind_t = 20;
pub const ecs_meta_type_op_kind_t_EcsOpUPtr: ecs_meta_type_op_kind_t = 21;
pub const ecs_meta_type_op_kind_t_EcsOpIPtr: ecs_meta_type_op_kind_t = 22;
pub const ecs_meta_type_op_kind_t_EcsOpString: ecs_meta_type_op_kind_t = 23;
pub const ecs_meta_type_op_kind_t_EcsOpEntity: ecs_meta_type_op_kind_t = 24;
pub type ecs_meta_type_op_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_meta_type_op_t {
    pub kind: ecs_meta_type_op_kind_t,
    pub offset: ecs_size_t,
    pub count: i32,
    pub name: *const ::std::os::raw::c_char,
    pub op_count: i32,
    pub size: ecs_size_t,
    pub type_: ecs_entity_t,
    pub unit: ecs_entity_t,
    pub members: *mut ecs_hashmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMetaTypeSerialized {
    pub ops: *mut ecs_vector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_meta_scope_t {
    pub type_: ecs_entity_t,
    pub ops: *mut ecs_meta_type_op_t,
    pub op_count: i32,
    pub op_cur: i32,
    pub elem_cur: i32,
    pub ptr: *mut ::std::os::raw::c_void,
    pub comp: *const EcsComponent,
    pub vector: *mut *mut ecs_vector_t,
    pub is_collection: bool,
    pub is_inline_array: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_meta_cursor_t {
    pub world: *const ecs_world_t,
    pub scope: [ecs_meta_scope_t; 32usize],
    pub depth: i32,
    pub valid: bool,
    pub is_primitive_scope: bool,
    pub lookup_action: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ecs_world_t,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ecs_entity_t,
    >,
    pub lookup_ctx: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn ecs_meta_cursor(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ecs_meta_cursor_t;
}
extern "C" {
    pub fn ecs_meta_get_ptr(cursor: *mut ecs_meta_cursor_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_meta_next(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_elem(cursor: *mut ecs_meta_cursor_t, elem: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_member(
        cursor: *mut ecs_meta_cursor_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_push(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_pop(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_is_collection(cursor: *const ecs_meta_cursor_t) -> bool;
}
extern "C" {
    pub fn ecs_meta_get_type(cursor: *const ecs_meta_cursor_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_meta_get_unit(cursor: *const ecs_meta_cursor_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_meta_get_member(cursor: *const ecs_meta_cursor_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_set_bool(cursor: *mut ecs_meta_cursor_t, value: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_char(
        cursor: *mut ecs_meta_cursor_t,
        value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_int(cursor: *mut ecs_meta_cursor_t, value: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_uint(cursor: *mut ecs_meta_cursor_t, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_float(cursor: *mut ecs_meta_cursor_t, value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_string(
        cursor: *mut ecs_meta_cursor_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_string_literal(
        cursor: *mut ecs_meta_cursor_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_entity(
        cursor: *mut ecs_meta_cursor_t,
        value: ecs_entity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_null(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_get_bool(cursor: *const ecs_meta_cursor_t) -> bool;
}
extern "C" {
    pub fn ecs_meta_get_char(cursor: *const ecs_meta_cursor_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_get_int(cursor: *const ecs_meta_cursor_t) -> i64;
}
extern "C" {
    pub fn ecs_meta_get_uint(cursor: *const ecs_meta_cursor_t) -> u64;
}
extern "C" {
    pub fn ecs_meta_get_float(cursor: *const ecs_meta_cursor_t) -> f64;
}
extern "C" {
    pub fn ecs_meta_get_string(cursor: *const ecs_meta_cursor_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_get_entity(cursor: *const ecs_meta_cursor_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_primitive_desc_t {
    pub entity: ecs_entity_t,
    pub kind: ecs_primitive_kind_t,
}
extern "C" {
    pub fn ecs_primitive_init(
        world: *mut ecs_world_t,
        desc: *const ecs_primitive_desc_t,
    ) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_enum_desc_t {
    pub entity: ecs_entity_t,
    pub constants: [ecs_enum_constant_t; 32usize],
}
extern "C" {
    pub fn ecs_enum_init(world: *mut ecs_world_t, desc: *const ecs_enum_desc_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bitmask_desc_t {
    pub entity: ecs_entity_t,
    pub constants: [ecs_bitmask_constant_t; 32usize],
}
extern "C" {
    pub fn ecs_bitmask_init(
        world: *mut ecs_world_t,
        desc: *const ecs_bitmask_desc_t,
    ) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_array_desc_t {
    pub entity: ecs_entity_t,
    pub type_: ecs_entity_t,
    pub count: i32,
}
extern "C" {
    pub fn ecs_array_init(world: *mut ecs_world_t, desc: *const ecs_array_desc_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_vector_desc_t {
    pub entity: ecs_entity_t,
    pub type_: ecs_entity_t,
}
extern "C" {
    pub fn ecs_vector_init(world: *mut ecs_world_t, desc: *const ecs_vector_desc_t)
        -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_struct_desc_t {
    pub entity: ecs_entity_t,
    pub members: [ecs_member_t; 1usize],
}
extern "C" {
    pub fn ecs_struct_init(world: *mut ecs_world_t, desc: *const ecs_struct_desc_t)
        -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_unit_desc_t {
    pub entity: ecs_entity_t,
    pub symbol: *const ::std::os::raw::c_char,
    pub quantity: ecs_entity_t,
    pub base: ecs_entity_t,
    pub over: ecs_entity_t,
    pub translation: ecs_unit_translation_t,
    pub prefix: ecs_entity_t,
}
extern "C" {
    pub fn ecs_unit_init(world: *mut ecs_world_t, desc: *const ecs_unit_desc_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_unit_prefix_desc_t {
    pub entity: ecs_entity_t,
    pub symbol: *const ::std::os::raw::c_char,
    pub translation: ecs_unit_translation_t,
}
extern "C" {
    pub fn ecs_unit_prefix_init(
        world: *mut ecs_world_t,
        desc: *const ecs_unit_prefix_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_quantity_init(
        world: *mut ecs_world_t,
        desc: *const ecs_entity_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn FlecsMetaImport(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_chresc(
        out: *mut ::std::os::raw::c_char,
        in_: ::std::os::raw::c_char,
        delimiter: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_chrparse(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_stresc(
        out: *mut ::std::os::raw::c_char,
        size: ecs_size_t,
        delimiter: ::std::os::raw::c_char,
        in_: *const ::std::os::raw::c_char,
    ) -> ecs_size_t;
}
extern "C" {
    pub fn ecs_astresc(
        delimiter: ::std::os::raw::c_char,
        in_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_parse_expr_desc_t {
    pub name: *const ::std::os::raw::c_char,
    pub expr: *const ::std::os::raw::c_char,
    pub lookup_action: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ecs_world_t,
            value: *const ::std::os::raw::c_char,
            ctx: *mut ::std::os::raw::c_void,
        ) -> ecs_entity_t,
    >,
    pub lookup_ctx: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn ecs_parse_expr(
        world: *const ecs_world_t,
        ptr: *const ::std::os::raw::c_char,
        type_: ecs_entity_t,
        data_out: *mut ::std::os::raw::c_void,
        desc: *const ecs_parse_expr_desc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_expr(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_expr_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        buf: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_primitive_to_expr_buf(
        world: *const ecs_world_t,
        kind: ecs_primitive_kind_t,
        data: *const ::std::os::raw::c_void,
        buf: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_parse_expr_token(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        token: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_from_desc(
        world: *mut ecs_world_t,
        component: ecs_entity_t,
        kind: ecs_type_kind_t,
        desc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_plecs_from_str(
        world: *mut ecs_world_t,
        name: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_plecs_from_file(
        world: *mut ecs_world_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_rule_init(
        world: *mut ecs_world_t,
        desc: *const ecs_filter_desc_t,
    ) -> *mut ecs_rule_t;
}
extern "C" {
    pub fn ecs_rule_fini(rule: *mut ecs_rule_t);
}
extern "C" {
    pub fn ecs_rule_get_filter(rule: *const ecs_rule_t) -> *const ecs_filter_t;
}
extern "C" {
    pub fn ecs_rule_var_count(rule: *const ecs_rule_t) -> i32;
}
extern "C" {
    pub fn ecs_rule_find_var(rule: *const ecs_rule_t, name: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn ecs_rule_var_name(rule: *const ecs_rule_t, var_id: i32)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_rule_var_is_entity(rule: *const ecs_rule_t, var_id: i32) -> bool;
}
extern "C" {
    pub fn ecs_rule_iter(world: *const ecs_world_t, rule: *const ecs_rule_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_rule_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_rule_next_instanced(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_rule_str(rule: *mut ecs_rule_t) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_snapshot_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ecs_snapshot_take(world: *mut ecs_world_t) -> *mut ecs_snapshot_t;
}
extern "C" {
    pub fn ecs_snapshot_take_w_iter(iter: *mut ecs_iter_t) -> *mut ecs_snapshot_t;
}
extern "C" {
    pub fn ecs_snapshot_restore(world: *mut ecs_world_t, snapshot: *mut ecs_snapshot_t);
}
extern "C" {
    pub fn ecs_snapshot_iter(snapshot: *mut ecs_snapshot_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_snapshot_next(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_snapshot_free(snapshot: *mut ecs_snapshot_t);
}
extern "C" {
    pub fn ecs_parse_whitespace(
        ptr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_eol_and_whitespace(
        ptr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_digit(
        ptr: *const ::std::os::raw::c_char,
        token: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_fluff(
        ptr: *const ::std::os::raw::c_char,
        last_comment: *mut *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_token(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        token_out: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_term(
        world: *const ecs_world_t,
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        term_out: *mut ecs_term_t,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_server_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_connection_t {
    pub id: u64,
    pub server: *mut ecs_http_server_t,
    pub host: [::std::os::raw::c_char; 128usize],
    pub port: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_key_value_t {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
pub const ecs_http_method_t_EcsHttpGet: ecs_http_method_t = 0;
pub const ecs_http_method_t_EcsHttpPost: ecs_http_method_t = 1;
pub const ecs_http_method_t_EcsHttpPut: ecs_http_method_t = 2;
pub const ecs_http_method_t_EcsHttpDelete: ecs_http_method_t = 3;
pub const ecs_http_method_t_EcsHttpOptions: ecs_http_method_t = 4;
pub const ecs_http_method_t_EcsHttpMethodUnsupported: ecs_http_method_t = 5;
pub type ecs_http_method_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_request_t {
    pub id: u64,
    pub method: ecs_http_method_t,
    pub path: *mut ::std::os::raw::c_char,
    pub body: *mut ::std::os::raw::c_char,
    pub headers: [ecs_http_key_value_t; 32usize],
    pub params: [ecs_http_key_value_t; 32usize],
    pub header_count: i32,
    pub param_count: i32,
    pub conn: *mut ecs_http_connection_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_reply_t {
    pub code: ::std::os::raw::c_int,
    pub body: ecs_strbuf_t,
    pub status: *const ::std::os::raw::c_char,
    pub content_type: *const ::std::os::raw::c_char,
    pub headers: ecs_strbuf_t,
}
pub type ecs_http_reply_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        request: *const ecs_http_request_t,
        reply: *mut ecs_http_reply_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_server_desc_t {
    pub callback: ecs_http_reply_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub port: u16,
    pub ipaddr: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_http_server_init(desc: *const ecs_http_server_desc_t) -> *mut ecs_http_server_t;
}
extern "C" {
    pub fn ecs_http_server_fini(server: *mut ecs_http_server_t);
}
extern "C" {
    pub fn ecs_http_server_start(server: *mut ecs_http_server_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_http_server_dequeue(server: *mut ecs_http_server_t, delta_time: f32);
}
extern "C" {
    pub fn ecs_http_server_stop(server: *mut ecs_http_server_t);
}
extern "C" {
    pub fn ecs_http_get_header(
        req: *const ecs_http_request_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_http_get_param(
        req: *const ecs_http_request_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_set_os_api_impl();
}
extern "C" {
    pub fn ecs_import(
        world: *mut ecs_world_t,
        module: ecs_module_action_t,
        module_name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_import_c(
        world: *mut ecs_world_t,
        module: ecs_module_action_t,
        module_name_c: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_import_from_library(
        world: *mut ecs_world_t,
        library_name: *const ::std::os::raw::c_char,
        module_name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_module_init(
        world: *mut ecs_world_t,
        c_name: *const ::std::os::raw::c_char,
        desc: *const ecs_component_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_get_type_name(
        type_name: *mut ::std::os::raw::c_char,
        func_name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_get_symbol_name(
        symbol_name: *mut ::std::os::raw::c_char,
        type_name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_get_constant_name(
        constant_name: *mut ::std::os::raw::c_char,
        func_name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_trim_module(
        world: *mut ecs_world_t,
        type_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_component_validate(
        world: *mut ecs_world_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        alignment: usize,
        implicit_name: bool,
    );
}
extern "C" {
    pub fn ecs_cpp_component_register(
        world: *mut ecs_world_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
        size: ecs_size_t,
        alignment: ecs_size_t,
        implicit_name: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_component_register_explicit(
        world: *mut ecs_world_t,
        s_id: ecs_entity_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        type_name: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
        size: usize,
        alignment: usize,
        is_component: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_enum_constant_register(
        world: *mut ecs_world_t,
        parent: ecs_entity_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_reset_count_get() -> i32;
}
extern "C" {
    pub fn ecs_cpp_reset_count_inc() -> i32;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_cache_hdr_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_op_ctx_t {
    pub _address: u8,
}
